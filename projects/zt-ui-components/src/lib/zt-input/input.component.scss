@use "../../assets/variables" as vars;

// CSS Custom Properties for consistent theming - properly scoped
:host {
  // Input dimensions and spacing - optimized for better label alignment
  --zt-input-height: 42px; // Optimized height for better proportions
  --zt-input-padding: 12px;
  --zt-input-border-radius: 4px;
  --zt-input-border-size: 1px;
  --zt-input-transition: 0.15s ease-out;

  // Color scheme with proper fallbacks
  --zt-input-bg: #ffffff;
  --zt-input-color: #212529;
  --zt-input-border: #ced4da;
  --zt-input-border-focus: #007bff;
  --zt-input-placeholder: #6c757d;
  --zt-input-shadow: rgba(0, 123, 255, 0.25);

  // Error states with fallbacks
  --zt-input-error: #dc3545;
  --zt-input-error-shadow: rgba(220, 53, 69, 0.25);
  --zt-input-warning: #ffc107;
  --zt-input-warning-shadow: rgba(255, 193, 7, 0.25);

  // Character counter with fallbacks
  --zt-counter-font-size: 0.875rem;
  --zt-counter-spacing: 8px;

  // Label positioning with fallbacks - optimized for better alignment
  --zt-label-spacing: 8px;
  --zt-label-transform: -90%; // Reduced from -100% for better visual balance
  --zt-label-height: var(--zt-input-height); // Match input height by default
  --zt-label-offset: calc(var(--zt-input-padding) * 0.3); // Position slightly above center

  // Typography with fallbacks
  --zt-font-family: "Segoe UI", system-ui, sans-serif;
  --zt-font-size-small: 0.875rem;
  --zt-font-size-medium: 1rem;
  --zt-font-size-large: 1.125rem;

  // Spacing with fallbacks
  --zt-spacing-small: 8px;
  --zt-spacing-medium: 12px;
  --zt-spacing-large: 16px;

  // Border properties with fallbacks
  --zt-border-radius: 4px;
  --zt-border-size: 1px;

  // Theme colors with fallbacks
  --zt-primary: #007bff;
  --zt-text-black: #212529;
  --zt-text-gray: #6c757d;
  --zt-default: #ffffff;
  --zt-default-hover-border: #ced4da;
}

// Style-specific visibility
:host(.zt-zt) {
  .box_input {
    display: block;
  }
  .material_input {
    display: none;
  }
  .input_bs {
    display: none;
  }
}

:host(.zt-material) {
  .box_input {
    display: none;
  }
  .material_input {
    display: block;
  }
  .input_bs {
    display: none;
  }
}

:host(.zt-bs) {
  .box_input {
    display: none;
  }
  .material_input {
    display: none;
  }
  .input_bs {
    display: block;
  }
}
// Common styles for all input containers
.zt-input-container {
  position: relative;
  width: 100%;
}

// Base ZT Style Input
:host {
  font-family: var(--zt-font-family);

  .box_input {
    .form__group {
      position: relative;
    }

    input {
      width: 100%;
      border: var(--zt-input-border-size) solid var(--zt-input-border);
      border-radius: var(--zt-input-border-radius);
      box-sizing: border-box;
      background-color: var(--zt-input-bg);
      color: var(--zt-input-color);
      font-family: var(--zt-font-family);
      font-size: var(--zt-font-size-medium);
      transition: var(--zt-input-transition);

      &::placeholder {
        color: var(--zt-input-placeholder);
        background-color: transparent;
      }

      &:focus {
        outline: none;
        border-color: var(--zt-input-border-focus);
        box-shadow: 0 0 0 calc(var(--zt-input-border-size) * 2) var(--zt-input-shadow);
      }

      &:disabled {
        background-color: var(--zt-input-bg-disabled, #e9ecef);
        opacity: 0.65;
        cursor: not-allowed;
      }

      &.error {
        border-color: var(--zt-input-error);
        box-shadow: 0 0 0 calc(var(--zt-input-border-size) * 2) var(--zt-input-error-shadow);
      }
    }

    .label {
      position: absolute;
      top: 0;
      bottom: 0;
      left: var(--zt-input-padding);
      height: var(--zt-label-height); // Match input height exactly
      display: flex;
      align-items: flex-start; // Changed from center to start
      justify-content: flex-start;
      pointer-events: none;
      width: 100%;
      padding-top: var(--zt-label-offset, calc(var(--zt-input-padding) * 0.3)); // Position slightly above center
    }

    .label .text {
      font-family: var(--zt-font-family);
      font-size: var(--zt-font-size-medium);
      transition: var(--zt-input-transition);
      color: var(--zt-input-color);
      padding: 0 var(--zt-counter-spacing);
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    input:focus + .label .text,
    input:not([value=""]) + .label .text {
      font-size: var(--zt-counter-font-size);
      transform: translateY(var(--zt-label-transform, -100%));
      background-color: var(--zt-input-bg);
      padding: 0 calc(var(--zt-counter-spacing) * 0.5);
    }
  }
}

// Size variants for ZT style - optimized ratios for perfect label alignment
:host(.zt-sm) {
  .box_input input {
    height: calc(var(--zt-input-height) * 0.8); // 33.6px - proportional to new base
    padding: calc(var(--zt-input-padding) * 0.8);
    font-size: var(--zt-font-size-small);
  }

  .box_input .label {
    left: calc(var(--zt-input-padding) * 0.8);
    height: calc(var(--zt-input-height) * 0.8); // Match input height exactly
    --zt-label-height: calc(var(--zt-input-height) * 0.8);
    padding-top: calc(var(--zt-input-padding) * 0.25); // Slightly less offset for small
  }

  .box_input .label .text {
    font-size: var(--zt-font-size-small);
    padding: 0 calc(var(--zt-counter-spacing) * 0.8);
  }

  input:focus + .label .text,
  input:not([value=""]) + .label .text {
    padding: 0 calc(var(--zt-counter-spacing) * 0.6); // Optimized multiplier
    transform: translateY(var(--zt-label-transform, -90%));
  }
}

:host(.zt-md) {
  .box_input input {
    height: var(--zt-input-height); // 42px - new optimized base
    padding: var(--zt-input-padding);
    font-size: var(--zt-font-size-medium);
  }

  .box_input .label {
    left: var(--zt-input-padding);
    height: var(--zt-input-height); // Match input height exactly
    --zt-label-height: var(--zt-input-height);
    padding-top: var(--zt-label-offset, calc(var(--zt-input-padding) * 0.3)); // Standard offset
  }

  .box_input .label .text {
    font-size: var(--zt-font-size-medium);
    padding: 0 var(--zt-counter-spacing);
  }

  input:focus + .label .text,
  input:not([value=""]) + .label .text {
    padding: 0 calc(var(--zt-counter-spacing) * 0.6); // Consistent with small
    transform: translateY(var(--zt-label-transform, -90%));
  }
}

:host(.zt-lg) {
  .box_input input {
    height: 50px; // 50px - exactly as requested
    padding: calc(var(--zt-input-padding) * 1.19); // Proportional to 50px height
    font-size: var(--zt-font-size-large);
  }

  .box_input .label {
    left: calc(var(--zt-input-padding) * 1.19);
    height: 50px; // Match input height exactly
    --zt-label-height: 50px;
    padding-top: calc(var(--zt-input-padding) * 0.35); // Slightly more offset for large
  }

  .box_input .label .text {
    font-size: var(--zt-font-size-large);
    padding: 0 calc(var(--zt-counter-spacing) * 1.19);
  }

  input:focus + .label .text,
  input:not([value=""]) + .label .text {
    padding: 0 calc(var(--zt-counter-spacing) * 0.7); // Proportional multiplier
    transform: translateY(var(--zt-label-transform, -90%));
  }
}

// Material Style Input - Base styles
:host(.zt-material) {
  .material_input {
    .form__group {
      position: relative;
      padding: 15px 0 0;
      margin-top: 10px;
    }

    .form__field {
      font-family: var(--zt-font-family);
      width: 100%;
      border: 0;
      border-bottom: var(--zt-input-border-size) solid var(--zt-input-border);
      outline: 0;
      color: var(--zt-input-color);
      padding: var(--zt-counter-spacing) 0;
      background: transparent;
      transition: var(--zt-input-transition);

      &::placeholder {
        color: transparent;
      }

      &:focus {
        border-bottom-color: var(--zt-input-border-focus);
        border-bottom-width: calc(var(--zt-input-border-size) * 2);
      }

      &:disabled {
        color: var(--zt-input-placeholder);
        cursor: not-allowed;
      }

      &.error {
        border-bottom-color: var(--zt-input-error);
        border-bottom-width: calc(var(--zt-input-border-size) * 2);
      }
    }

    .form__field:placeholder-shown ~ .form__label {
      cursor: text;
      top: 20px;
      left: 0;
    }

    .form__label,
    .form__field:focus ~ .form__label {
      position: absolute;
      top: 0;
      left: 0;
      display: block;
      transition: var(--zt-input-transition);
      color: var(--zt-input-placeholder);
      padding: 0 var(--zt-counter-spacing);
      pointer-events: none;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      width: 100%;
    }

    .form__field:focus ~ .form__label {
      color: var(--zt-input-border-focus);
      font-size: var(--zt-counter-font-size);
      top: -8px;
    }
  }
}

// Material Style Size Variants - optimized for consistency
:host(.zt-material.zt-sm) {
  .material_input .form__field {
    font-size: var(--zt-font-size-small);
    padding: calc(var(--zt-counter-spacing) * 0.8) 0;
  }

  .material_input .form__field:placeholder-shown ~ .form__label {
    font-size: var(--zt-font-size-small);
    top: calc(20px * 0.8);
    padding: 0 calc(var(--zt-counter-spacing) * 0.8);
  }

  .material_input .form__label {
    font-size: calc(var(--zt-counter-font-size) * 0.9);
    padding: 0 calc(var(--zt-counter-spacing) * 0.8);
  }
}

:host(.zt-material.zt-md) {
  .material_input .form__field {
    font-size: var(--zt-font-size-medium);
    padding: var(--zt-counter-spacing) 0;
  }

  .material_input .form__field:placeholder-shown ~ .form__label {
    font-size: var(--zt-font-size-medium);
    top: 20px;
    padding: 0 var(--zt-counter-spacing);
  }

  .material_input .form__label {
    font-size: var(--zt-counter-font-size);
    padding: 0 var(--zt-counter-spacing);
  }
}

:host(.zt-material.zt-lg) {
  .material_input .form__field {
    font-size: var(--zt-font-size-large);
    padding: calc(var(--zt-counter-spacing) * 1.19) 0;
  }

  .material_input .form__field:placeholder-shown ~ .form__label {
    font-size: var(--zt-font-size-large);
    top: calc(20px * 1.19);
    padding: 0 calc(var(--zt-counter-spacing) * 1.19);
  }

  .material_input .form__label {
    font-size: calc(var(--zt-counter-font-size) * 1.05);
    padding: 0 calc(var(--zt-counter-spacing) * 1.19);
  }
}

// Bootstrap Style Input - Base styles
:host(.zt-bs) {
  .input_bs {
    .form__field.form-control {
      width: 100%;
      border: calc(var(--zt-input-border-size) * 2) solid var(--zt-input-border);
      border-radius: var(--zt-input-border-radius);
      margin: var(--zt-counter-spacing) 0;
      outline: none;
      box-sizing: border-box;
      background-color: var(--zt-input-bg);
      color: var(--zt-input-color);
      font-family: var(--zt-font-family);
      font-size: var(--zt-font-size-medium);
      transition: var(--zt-input-transition);

      &:focus {
        border-color: var(--zt-input-border-focus);
        box-shadow: 0 0 0 calc(var(--zt-counter-spacing) * 0.5) var(--zt-input-shadow);
      }

      &:disabled {
        background-color: var(--zt-input-bg-disabled, #e9ecef);
        opacity: 0.65;
        cursor: not-allowed;
      }

      &.error {
        border-color: var(--zt-input-error);
        box-shadow: 0 0 0 calc(var(--zt-counter-spacing) * 0.5) var(--zt-input-error-shadow);
      }
    }
  }
}

// Bootstrap Style Size Variants - optimized for consistency
:host(.zt-bs.zt-sm) {
  .input_bs .form__field.form-control {
    padding: calc(var(--zt-counter-spacing) * 0.8);
    font-size: var(--zt-font-size-small);
    margin: calc(var(--zt-counter-spacing) * 0.8) 0;
  }
}

:host(.zt-bs.zt-md) {
  .input_bs .form__field.form-control {
    padding: var(--zt-counter-spacing);
    font-size: var(--zt-font-size-medium);
    margin: var(--zt-counter-spacing) 0;
  }
}

:host(.zt-bs.zt-lg) {
  .input_bs .form__field.form-control {
    padding: calc(var(--zt-counter-spacing) * 1.19);
    font-size: var(--zt-font-size-large);
    margin: calc(var(--zt-counter-spacing) * 1.19) 0;
  }
}

// Character Counter and Error Messages - Global styles
.char-counter {
  font-size: var(--zt-counter-font-size);
  text-align: right;
  margin-top: var(--zt-counter-spacing);
  transition: var(--zt-input-transition);

  &.warning {
    color: var(--zt-input-warning);
  }

  &.error {
    color: var(--zt-input-error);
  }
}

.error-message {
  font-size: var(--zt-counter-font-size);
  color: var(--zt-input-error);
  margin-top: var(--zt-counter-spacing);
  display: flex;
  align-items: center;

  &::before {
    content: "⚠";
    margin-right: var(--zt-counter-spacing);
  }
}
