{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "AllVariantsShowcase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    cardStyle: 'elevated',\r\n    theme: 'light',\r\n    size: 'md',\r\n    hoverable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 16px;\">\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" variant=\"default\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Default Variant</div>\r\n        <div class=\"card-body\">Default variant uses standard colors and styling without accent colors.</div>\r\n        <div class=\"card-footer\"><button>Default Action</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Primary Variant</div>\r\n        <div class=\"card-body\">Primary variant uses blue colors for headers and footer borders.</div>\r\n        <div class=\"card-footer\"><button>Primary Action</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" variant=\"info\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Info Variant</div>\r\n        <div class=\"card-body\">Info variant uses teal/cyan colors for informational content.</div>\r\n        <div class=\"card-footer\"><button>Info Action</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" variant=\"danger\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Danger Variant</div>\r\n        <div class=\"card-body\">Danger variant uses red colors for warnings and errors.</div>\r\n        <div class=\"card-footer\"><button>Danger Action</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" variant=\"warning\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Warning Variant</div>\r\n        <div class=\"card-body\">Warning variant uses yellow/orange colors for cautions.</div>\r\n        <div class=\"card-footer\"><button>Warning Action</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" variant=\"dark\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Dark Variant</div>\r\n        <div class=\"card-body\">Dark variant uses dark gray colors for subtle styling.</div>\r\n        <div class=\"card-footer\"><button>Dark Action</button></div>\r\n      </zt-card>\r\n    </div>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "BasicCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    cardStyle: 'elevated',\r\n    theme: 'light',\r\n    size: 'md',\r\n    variant: 'default',\r\n    hoverable: false,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-card [cardStyle]=\"cardStyle\" [theme]=\"theme\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n      <div class=\"card-header\">Basic Card</div>\r\n      <div class=\"card-body\">This is a basic card component demonstrating the default styling with elevated style.</div>\r\n      <div class=\"card-footer\"><button>Action</button></div>\r\n    </zt-card>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "Bootstrap_Input",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'bootstrap',\r\n    inputStyle: 'bs',\r\n    placeholder: 'Bootstrap style input',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-input [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\"></zt-input>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "Bootstrap_Select",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'bootstrap',\r\n    inputStyle: 'bs',\r\n    placeholder: 'Choose an option',\r\n    dataSource: [\r\n      { id: 1, firstName: 'Eve' },\r\n      { id: 2, firstName: 'Frank' },\r\n      { id: 3, firstName: 'Grace' },\r\n    ],\r\n    key: 'id',\r\n    displayValue: 'firstName',\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Bootstrap Style uses `[ngValue]=\"null\"` for placeholder option and properly displays `placeholder` property text. This is the recommended style for placeholder functionality.',\r\n      },\r\n    },\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-select [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\" [dataSource]=\"dataSource\" [key]=\"key\" [displayValue]=\"displayValue\"></zt-select>\r\n    `,\r\n    props: args,\r\n  }),\r\n}",
                "rawdescription": "Bootstrap Style Select - Bootstrap styling with `[ngValue]=\"null\"` placeholder option.\r\n**This is the only style that properly supports placeholder functionality.**\r\nUses the `placeholder` property for placeholder text display.",
                "description": "<p>Bootstrap Style Select - Bootstrap styling with <code>[ngValue]=&quot;null&quot;</code> placeholder option.\n<strong>This is the only style that properly supports placeholder functionality.</strong>\nUses the <code>placeholder</code> property for placeholder text display.</p>\n"
            },
            {
                "name": "Bootstrap_Textarea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'bootstrap',\r\n    inputStyle: 'bs',\r\n    placeholder: 'Bootstrap style textarea',\r\n    rows: 4,\r\n    textlength: 255,\r\n    showCharCount: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-textarea [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\" [rows]=\"rows\" [textlength]=\"textlength\" [showCharCount]=\"showCharCount\"></zt-textarea>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "BootstrapTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Bootstrap Theme Modal',\r\n    size: 'md',\r\n    theme: 'bootstrap',\r\n    closable: true,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <p>This modal uses the Bootstrap theme with classic styling and subtle background colors.</p>\r\n          <div class=\"alert alert-info\" role=\"alert\">\r\n            <strong>Bootstrap Theme:</strong> Familiar Bootstrap modal appearance with enhanced accessibility.\r\n          </div>\r\n          <p>The Bootstrap theme maintains consistency with Bootstrap-based applications.</p>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-secondary\" (click)=\"closeModal()\">Close</button>\r\n          <button class=\"btn btn-primary\" (click)=\"saveModal()\">Save Changes</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      saveModal: () => {\r\n        console.log('Saved with Bootstrap theme!');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "Button",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: \"zt-sm\",\r\n    outline: false,\r\n    theme: \"light\",\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-button [variant]=\"'default'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">default</zt-button>\r\n    <zt-button [variant]=\"'primary'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">primary</zt-button>\r\n    <zt-button [variant]=\"'info'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">info</zt-button>\r\n    <zt-button [variant]=\"'success'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">success</zt-button>\r\n    <zt-button [variant]=\"'danger'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">danger</zt-button>\r\n    <zt-button [variant]=\"'warning'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">warning</zt-button>\r\n    <zt-button [variant]=\"'dark'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">dark</zt-button>\r\n    <zt-button [variant]=\"'link'\" [outline]=\"false\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">link</zt-button>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "CardStylesShowcase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    theme: 'light',\r\n    size: 'md',\r\n    variant: 'default',\r\n    hoverable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;\">\r\n      <zt-card cardStyle=\"elevated\" [theme]=\"theme\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Elevated Style</div>\r\n        <div class=\"card-body\">Elevated cards have shadows and borders for a raised appearance.</div>\r\n        <div class=\"card-footer\"><button>Elevated Action</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"outlined\" [theme]=\"theme\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Outlined Style</div>\r\n        <div class=\"card-body\">Outlined cards use borders instead of shadows for definition.</div>\r\n        <div class=\"card-footer\"><button>Outlined Action</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"flat\" [theme]=\"theme\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Flat Style</div>\r\n        <div class=\"card-body\">Flat cards have no shadows or borders, perfect for subtle designs.</div>\r\n        <div class=\"card-footer\"><button>Flat Action</button></div>\r\n      </zt-card>\r\n    </div>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "CompleteShowcase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    hoverable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <div style=\"padding: 20px;\">\r\n      <h2 style=\"margin-bottom: 20px; color: #333;\">Card Component Showcase</h2>\r\n\r\n      <div style=\"margin-bottom: 40px;\">\r\n        <h3 style=\"margin-bottom: 16px; color: #666;\">Card Styles</h3>\r\n        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 16px;\">\r\n          <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Elevated Card</div>\r\n            <div class=\"card-body\">Elevated cards use shadows and borders for depth.</div>\r\n            <div class=\"card-footer\"><button>Elevated</button></div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"outlined\" theme=\"light\" size=\"md\" variant=\"info\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Outlined Card</div>\r\n            <div class=\"card-body\">Outlined cards use borders for clear definition.</div>\r\n            <div class=\"card-footer\"><button>Outlined</button></div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"flat\" theme=\"light\" size=\"md\" variant=\"warning\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Flat Card</div>\r\n            <div class=\"card-body\">Flat cards are minimal with no shadows or borders.</div>\r\n            <div class=\"card-footer\"><button>Flat</button></div>\r\n          </zt-card>\r\n        </div>\r\n      </div>\r\n\r\n      <div style=\"margin-bottom: 40px;\">\r\n        <h3 style=\"margin-bottom: 16px; color: #666;\">Color Variants</h3>\r\n        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px;\">\r\n          <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"sm\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Primary</div>\r\n            <div class=\"card-body\">Blue accent colors</div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"sm\" variant=\"info\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Info</div>\r\n            <div class=\"card-body\">Teal accent colors</div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"sm\" variant=\"danger\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Danger</div>\r\n            <div class=\"card-body\">Red accent colors</div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"sm\" variant=\"warning\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Warning</div>\r\n            <div class=\"card-body\">Yellow accent colors</div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"sm\" variant=\"dark\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Dark</div>\r\n            <div class=\"card-body\">Dark gray accents</div>\r\n          </zt-card>\r\n        </div>\r\n      </div>\r\n\r\n      <div style=\"margin-bottom: 40px;\">\r\n        <h3 style=\"margin-bottom: 16px; color: #666;\">Themes</h3>\r\n        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px;\">\r\n          <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Light Theme</div>\r\n            <div class=\"card-body\">Bright theme for light backgrounds.</div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"elevated\" theme=\"dark\" size=\"md\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Dark Theme</div>\r\n            <div class=\"card-body\">Dark theme for dark backgrounds.</div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"elevated\" theme=\"bootstrap\" size=\"md\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Bootstrap</div>\r\n            <div class=\"card-body\">Bootstrap design system colors.</div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"elevated\" theme=\"material\" size=\"md\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Material</div>\r\n            <div class=\"card-body\">Material Design guidelines.</div>\r\n          </zt-card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "ConfirmationDialog",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Confirm Action',\r\n    size: 'sm',\r\n    theme: 'light',\r\n    closable: true,\r\n    backdropClosable: false,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <div style=\"text-align: center; padding: 1rem;\">\r\n            <div style=\"font-size: 3rem; color: #ffc107; margin-bottom: 1rem;\">⚠️</div>\r\n            <p>Are you sure you want to delete this item? This action cannot be undone.</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-secondary\" (click)=\"cancelModal()\">Cancel</button>\r\n          <button class=\"btn btn-danger\" (click)=\"deleteModal()\">Delete</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      cancelModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      deleteModal: () => {\r\n        console.log('Item deleted!');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "CustomContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Custom Content Modal',\r\n    size: 'lg',\r\n    theme: 'light',\r\n    closable: true,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <div style=\"display: flex; gap: 1rem; margin-bottom: 1rem;\">\r\n            <div style=\"flex: 1;\">\r\n              <h5>Form Section</h5>\r\n              <div style=\"margin-bottom: 1rem;\">\r\n                <label style=\"display: block; margin-bottom: 0.5rem;\">Name:</label>\r\n                <input type=\"text\" class=\"form-control\" placeholder=\"Enter your name\">\r\n              </div>\r\n              <div style=\"margin-bottom: 1rem;\">\r\n                <label style=\"display: block; margin-bottom: 0.5rem;\">Email:</label>\r\n                <input type=\"email\" class=\"form-control\" placeholder=\"Enter your email\">\r\n              </div>\r\n            </div>\r\n            <div style=\"flex: 1;\">\r\n              <h5>Preview</h5>\r\n              <div style=\"background: #f8f9fa; padding: 1rem; border-radius: 0.25rem; height: 120px;\">\r\n                <p style=\"margin: 0;\">Form preview will appear here...</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div style=\"background: #e9ecef; padding: 1rem; border-radius: 0.25rem;\">\r\n            <strong>Custom Content:</strong> This modal demonstrates how to include forms, images, and complex layouts within the modal body.\r\n          </div>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <div style=\"display: flex; justify-content: space-between; width: 100%;\">\r\n            <button class=\"btn btn-outline-secondary\" (click)=\"resetModal()\">Reset</button>\r\n            <div>\r\n              <button class=\"btn btn-secondary\" (click)=\"closeModal()\" style=\"margin-right: 0.5rem;\">Cancel</button>\r\n              <button class=\"btn btn-primary\" (click)=\"submitModal()\">Submit</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      resetModal: () => {\r\n        console.log('Form reset!');\r\n      },\r\n      submitModal: () => {\r\n        console.log('Form submitted!');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "DarkTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Dark Theme Modal',\r\n    size: 'md',\r\n    theme: 'dark',\r\n    closable: true,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <div style=\"background: #1a1a1a; padding: 20px; min-height: 100vh;\">\r\n        <zt-modal\r\n          [isOpen]=\"isOpen\"\r\n          [title]=\"title\"\r\n          [size]=\"size\"\r\n          [theme]=\"theme\"\r\n          [closable]=\"closable\"\r\n          [backdropClosable]=\"backdropClosable\">\r\n\r\n          <div modal-body>\r\n            <p>This modal uses the dark theme, perfect for dark mode applications or nighttime usage.</p>\r\n            <div style=\"background: #2d2d2d; padding: 1rem; border-radius: 0.25rem; margin: 1rem 0;\">\r\n              <code style=\"color: #61dafb;\">const theme = 'dark';</code>\r\n            </div>\r\n            <p>The dark theme provides better contrast in low-light environments and reduces eye strain.</p>\r\n          </div>\r\n\r\n          <div modal-footer>\r\n            <button class=\"btn btn-secondary\" (click)=\"closeModal()\">Close</button>\r\n            <button class=\"btn btn-primary\" (click)=\"applyModal()\">Apply Theme</button>\r\n          </div>\r\n        </zt-modal>\r\n      </div>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      applyModal: () => {\r\n        console.log('Dark theme applied!');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "DataGrid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    dataSource: sampleData,\r\n    columns: sampleColumns,\r\n    striped: true,\r\n    showBorders: true,\r\n    showEdit: true,\r\n    showDelete: true,\r\n    editButtonType: 'link',\r\n    deleteButtonType: 'link',\r\n    allowSorting: true,\r\n    allowSelection: true,\r\n    selectionMode: 'none',\r\n    pages: 4,\r\n    currentPageSize: 5,\r\n    paginatorStyle: 'page',\r\n    theme: \"material\",\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-data-grid\r\n      [dataSource]=\"dataSource\"\r\n      [columns]=\"columns\"\r\n      [striped]=\"striped\"\r\n      [showBorders]=\"showBorders\"\r\n      [showEdit]=\"showEdit\"\r\n      [showDelete]=\"showDelete\"\r\n      [editButtonType]=\"editButtonType\"\r\n      [deleteButtonType]=\"deleteButtonType\"\r\n      [allowSorting]=\"allowSorting\"\r\n      [allowSelection]=\"allowSelection\"\r\n      [selectionMode]=\"selectionMode\"\r\n      [pages]=\"pages\"\r\n      [currentPageSize]=\"currentPageSize\"\r\n      [paginatorStyle]=\"paginatorStyle\"\r\n      [theme]=\"theme\"\r\n      (onPageChange)=\"onPageChange($event)\"\r\n      (onDataGridEvent)=\"onDataGridEvent($event)\"\r\n    ></zt-data-grid>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "DataGridArrowPaginator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    dataSource: sampleData,\r\n    columns: sampleColumns,\r\n    striped: false,\r\n    showBorders: true,\r\n    showEdit: true,\r\n    showDelete: true,\r\n    editButtonType: 'button',\r\n    deleteButtonType: 'button',\r\n    allowSorting: true,\r\n    allowSelection: false,\r\n    selectionMode: 'none',\r\n    pages: 3,\r\n    currentPageSize: 4,\r\n    paginatorStyle: 'arrow',\r\n    theme: 'dark',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-data-grid\r\n      [dataSource]=\"dataSource\"\r\n      [columns]=\"columns\"\r\n      [striped]=\"striped\"\r\n      [showBorders]=\"showBorders\"\r\n      [showEdit]=\"showEdit\"\r\n      [showDelete]=\"showDelete\"\r\n      [allowSorting]=\"allowSorting\"\r\n      [allowSelection]=\"allowSelection\"\r\n      [selectionMode]=\"selectionMode\"\r\n      [pages]=\"pages\"\r\n      [pagesLimit]=\"pagesLimit\"\r\n      [currentPageSize]=\"currentPageSize\"\r\n      [paginatorStyle]=\"paginatorStyle\"\r\n      [theme]=\"theme\"\r\n      (onPageChange)=\"onPageChange($event)\"\r\n      (onDataGridEvent)=\"onDataGridEvent($event)\"\r\n    ></zt-data-grid>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "DataGridStriped",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    dataSource: sampleData,\r\n    columns: sampleColumns,\r\n    striped: true,\r\n    showBorders: true,\r\n    showEdit: false,\r\n    showDelete: false,\r\n    editButtonType: 'link',\r\n    deleteButtonType: 'link',\r\n    allowSorting: true,\r\n    allowSelection: false,\r\n    selectionMode: 'none',\r\n    pages: 3,\r\n    currentPageSize: 4,\r\n    paginatorStyle: 'page',\r\n    theme: 'light',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-data-grid\r\n      [dataSource]=\"dataSource\"\r\n      [columns]=\"columns\"\r\n      [striped]=\"striped\"\r\n      [showBorders]=\"showBorders\"\r\n      [showEdit]=\"showEdit\"\r\n      [showDelete]=\"showDelete\"\r\n      [allowSorting]=\"allowSorting\"\r\n      [allowSelection]=\"allowSelection\"\r\n      [selectionMode]=\"selectionMode\"\r\n      [pages]=\"pages\"\r\n      [currentPageSize]=\"currentPageSize\"\r\n      [paginatorStyle]=\"paginatorStyle\"\r\n      [theme]=\"theme\"\r\n      (onPageChange)=\"onPageChange($event)\"\r\n      (onDataGridEvent)=\"onDataGridEvent($event)\"\r\n    ></zt-data-grid>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Default Modal',\r\n    size: 'md',\r\n    theme: 'light',\r\n    closable: true,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\"\r\n        (onClose)=\"onClose()\"\r\n        (onOpen)=\"onOpen()\">\r\n\r\n        <div modal-body>\r\n          <p>This is the default modal with standard content. You can customize the body and footer as needed.</p>\r\n          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-secondary\" (click)=\"closeModal()\">Close</button>\r\n          <button class=\"btn btn-primary\" (click)=\"saveModal()\">Save Changes</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      onClose: () => console.log('Modal closed'),\r\n      onOpen: () => console.log('Modal opened'),\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      saveModal: () => {\r\n        console.log('Saving...');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    position: 'top-right',\r\n    showDemoButtons: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: 'Default toast component with demo buttons to test all toast types.',\r\n    },\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Toast Notifications Demo</h3>\r\n        <p>Use the buttons below to trigger different types of toast notifications.</p>\r\n        <zt-toast [position]=\"position\" [showDemoButtons]=\"showDemoButtons\"></zt-toast>\r\n      </div>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "DifferentPositions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates toast notifications in different positions.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Different Positions</h3>\r\n        <p>This story shows multiple toast containers in different positions. Use the Default story to interact with the toasts.</p>\r\n        <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;\">\r\n          <div>\r\n            <h4>Top Positions</h4>\r\n            <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n            <zt-toast position=\"top-left\" showDemoButtons=\"false\"></zt-toast>\r\n            <zt-toast position=\"top-center\" showDemoButtons=\"false\"></zt-toast>\r\n          </div>\r\n          <div>\r\n            <h4>Bottom Positions</h4>\r\n            <zt-toast position=\"bottom-right\" showDemoButtons=\"false\"></zt-toast>\r\n            <zt-toast position=\"bottom-left\" showDemoButtons=\"false\"></zt-toast>\r\n            <zt-toast position=\"bottom-center\" showDemoButtons=\"false\"></zt-toast>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "ErrorToast",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates an error toast notification.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Error Toast</h3>\r\n        <p>This story shows the error toast type. Use the Default story to interact with all toast types.</p>\r\n        <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "ExtraLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Extra Large Modal',\r\n    size: 'xl',\r\n    theme: 'light',\r\n    closable: true,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <h3>Extra Large Modal</h3>\r\n          <p>This extra large modal provides maximum space for content, ideal for data tables, detailed forms, or multi-step wizards.</p>\r\n\r\n          <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin: 1rem 0;\">\r\n            <div style=\"background: #e9ecef; padding: 1rem; border-radius: 0.25rem;\">\r\n              <h5>Column 1</h5>\r\n              <p>Content for the first column.</p>\r\n            </div>\r\n            <div style=\"background: #e9ecef; padding: 1rem; border-radius: 0.25rem;\">\r\n              <h5>Column 2</h5>\r\n              <p>Content for the second column.</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div style=\"background: #d1ecf1; padding: 1rem; border-radius: 0.25rem; margin: 1rem 0;\">\r\n            <strong>Note:</strong> This modal size is perfect for complex layouts and extensive information display.\r\n          </div>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-secondary\" (click)=\"closeModal()\">Close</button>\r\n          <button class=\"btn btn-primary\" (click)=\"proceedModal()\">Proceed</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      proceedModal: () => {\r\n        console.log('Proceeding...');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "Floating_Button",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    theme: 'light',\r\n    size: \"zt-sm\"\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-button [variant]=\"'floating'\" [theme]=\"theme\">+</zt-button>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "Fullscreen",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Fullscreen Modal',\r\n    size: 'fullscreen',\r\n    theme: 'light',\r\n    closable: true,\r\n    backdropClosable: false,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body style=\"height: calc(100vh - 200px); overflow-y: auto;\">\r\n          <h2>Fullscreen Modal</h2>\r\n          <p>This fullscreen modal utilizes the entire viewport for maximum content space.</p>\r\n\r\n          <div style=\"margin: 2rem 0;\">\r\n            <h4>Perfect for:</h4>\r\n            <ul>\r\n              <li>Image galleries and media viewers</li>\r\n              <li>Complex data visualization</li>\r\n              <li>Multi-step forms or wizards</li>\r\n              <li>Full-screen editing interfaces</li>\r\n              <li>Document viewers</li>\r\n            </ul>\r\n          </div>\r\n\r\n          <div style=\"background: linear-gradient(45deg, #f8f9fa, #e9ecef); padding: 2rem; border-radius: 0.5rem; margin: 2rem 0;\">\r\n            <h5>Content Area</h5>\r\n            <p>This area can contain any type of content, including scrollable sections, interactive elements, and rich media.</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-secondary\" (click)=\"closeModal()\">Exit Fullscreen</button>\r\n          <button class=\"btn btn-primary\" (click)=\"finishModal()\">Finish</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      finishModal: () => {\r\n        console.log('Finished!');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "InfoToast",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates an info toast notification.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Info Toast</h3>\r\n        <p>This story shows the info toast type. Use the Default story to interact with all toast types.</p>\r\n        <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Input",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: \"bootstrap\",\r\n    inputStyle: 'zt',\r\n    placeholder: 'Enter text',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-input [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\"></zt-input>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "InteractiveCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    cardStyle: 'outlined',\r\n    theme: 'light',\r\n    size: 'md',\r\n    variant: 'primary',\r\n    hoverable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-card [cardStyle]=\"cardStyle\" [theme]=\"theme\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n      <div class=\"card-header\">Interactive Card</div>\r\n      <div class=\"card-body\">This card demonstrates hover effects. Try hovering over it to see the interaction.</div>\r\n      <div class=\"card-footer\"><button>Interactive Action</button></div>\r\n    </zt-card>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Large Modal',\r\n    size: 'lg',\r\n    theme: 'light',\r\n    closable: true,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <h4>Large Modal Content</h4>\r\n          <p>This large modal can accommodate extensive content, including lists, forms, and multimedia elements.</p>\r\n\r\n          <div style=\"margin: 1rem 0;\">\r\n            <h5>Features:</h5>\r\n            <ul>\r\n              <li>Responsive design that adapts to screen sizes</li>\r\n              <li>Keyboard navigation and focus management</li>\r\n              <li>Multiple theme support</li>\r\n              <li>Accessibility compliant with ARIA attributes</li>\r\n              <li>Customizable header, body, and footer sections</li>\r\n            </ul>\r\n          </div>\r\n\r\n          <div style=\"background: #f8f9fa; padding: 1rem; border-radius: 0.25rem; margin: 1rem 0;\">\r\n            <strong>Tip:</strong> Use this modal for detailed forms, image galleries, or complex user interactions.\r\n          </div>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-secondary\" (click)=\"closeModal()\">Cancel</button>\r\n          <button class=\"btn btn-success\" (click)=\"confirmModal()\">Confirm</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      confirmModal: () => {\r\n        console.log('Confirmed!');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LongDuration",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates toast notifications with longer duration.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Long Duration Toasts</h3>\r\n        <p>This story demonstrates toasts with longer duration. Use the Default story to see interactive examples.</p>\r\n        <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Material_Input",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'light',\r\n    inputStyle: 'material',\r\n    placeholder: 'Material style input',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-input [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\"></zt-input>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "Material_Select",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'light',\r\n    inputStyle: 'material',\r\n    placeholder: 'Material style select',\r\n    dataSource: [\r\n      { id: 1, firstName: 'Alice' },\r\n      { id: 2, firstName: 'Charlie' },\r\n      { id: 3, firstName: 'David' },\r\n    ],\r\n    key: 'id',\r\n    displayValue: 'firstName',\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Material Style uses `value=\"\"` for placeholder option with no display text in the option element.',\r\n      },\r\n    },\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-select [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\" [dataSource]=\"dataSource\" [key]=\"key\" [displayValue]=\"displayValue\"></zt-select>\r\n    `,\r\n    props: args,\r\n  }),\r\n}",
                "rawdescription": "Material Style Select - Material Design styling with `value=\"\"` placeholder option.\r\nUses the `message` property for placeholder text display (empty in template).",
                "description": "<p>Material Style Select - Material Design styling with <code>value=&quot;&quot;</code> placeholder option.\nUses the <code>message</code> property for placeholder text display (empty in template).</p>\n"
            },
            {
                "name": "Material_Textarea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'light',\r\n    inputStyle: 'material',\r\n    placeholder: 'Material style textarea',\r\n    rows: 4,\r\n    textlength: 255,\r\n    showCharCount: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-textarea [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\" [rows]=\"rows\" [textlength]=\"textlength\" [showCharCount]=\"showCharCount\"></zt-textarea>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "MaterialTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Material Theme Modal',\r\n    size: 'md',\r\n    theme: 'material',\r\n    closable: true,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <p>This modal uses the Material Design theme with modern styling and subtle shadows.</p>\r\n          <div style=\"background: #e3f2fd; padding: 1rem; border-radius: 4px; margin: 1rem 0;\">\r\n            <strong>Material Theme:</strong> Clean, modern design inspired by Material Design principles.\r\n          </div>\r\n          <p>The Material theme provides a contemporary look with enhanced depth and visual hierarchy.</p>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-secondary\" (click)=\"closeModal()\">Cancel</button>\r\n          <button class=\"btn btn-primary\" (click)=\"confirmModal()\">Confirm</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      confirmModal: () => {\r\n        console.log('Confirmed with Material theme!');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "MediaCards",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    cardStyle: 'elevated',\r\n    theme: 'light',\r\n    size: 'lg',\r\n    variant: 'info',\r\n    hoverable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: 20px;\">\r\n      <zt-card [cardStyle]=\"cardStyle\" [theme]=\"theme\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-media\">\r\n          <img src=\"https://picsum.photos/300/200?random=1\" alt=\"Random image\">\r\n        </div>\r\n        <div class=\"card-header\">Card with Media</div>\r\n        <div class=\"card-body\">This card demonstrates how media content is displayed above the card content.</div>\r\n        <div class=\"card-footer\"><button>View Media</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"outlined\" theme=\"material\" size=\"lg\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-media\">\r\n          <img src=\"https://picsum.photos/300/200?random=2\" alt=\"Random image\">\r\n        </div>\r\n        <div class=\"card-header\">Material Design Card</div>\r\n        <div class=\"card-body\">Material theme with rounded corners and primary variant styling.</div>\r\n        <div class=\"card-footer\"><button>Material Action</button></div>\r\n      </zt-card>\r\n    </div>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\r\n  title: 'Components/Button',\r\n  component: ButtonComponent,\r\n  argTypes: {\r\n    size: {\r\n      options: ['zt-md', 'zt-sm', 'zt-lg'],\r\n      control: { type: 'select' },\r\n      default: 'zt-md',\r\n    },\r\n    theme: {\r\n      options: ['light', 'dark', 'bootstrap', 'material'],\r\n      control: { type: 'select' },\r\n      default: 'light',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CardComponent>",
                "defaultValue": "{\r\n  title: 'Components/Card',\r\n  component: CardComponent,\r\n  argTypes: {\r\n    cardStyle: {\r\n      options: ['elevated', 'outlined', 'flat'],\r\n      control: { type: 'select' },\r\n      description: 'Visual style of the card',\r\n    },\r\n    theme: {\r\n      options: ['light', 'dark', 'bootstrap', 'material'],\r\n      control: { type: 'select' },\r\n      description: 'Theme variant for the card',\r\n    },\r\n    size: {\r\n      options: ['sm', 'md', 'lg'],\r\n      control: { type: 'select' },\r\n      description: 'Size of the card (affects padding)',\r\n    },\r\n    variant: {\r\n      options: ['default', 'primary', 'info', 'danger', 'warning', 'dark'],\r\n      control: { type: 'select' },\r\n      description: 'Color variant affecting header and footer styling',\r\n    },\r\n    hoverable: {\r\n      control: { type: 'boolean' },\r\n      description: 'Enable hover effects',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ZtDataGridComponent>",
                "defaultValue": "{\r\n  title: 'Components/Data Grid',\r\n  component: ZtDataGridComponent,\r\n  argTypes: {\r\n    dataSource: {\r\n      control: { type: 'object' },\r\n    },\r\n    columns: {\r\n      control: { type: 'object' },\r\n    },\r\n    striped: {\r\n      control: { type: 'boolean' },\r\n      default: false,\r\n    },\r\n    showBorders: {\r\n      control: { type: 'boolean' },\r\n      default: true,\r\n    },\r\n    showEdit: {\r\n      control: { type: 'boolean' },\r\n      default: false,\r\n    },\r\n    showDelete: {\r\n      control: { type: 'boolean' },\r\n      default: false,\r\n    },\r\n    editButtonType: {\r\n      options: ['button', 'link'],\r\n      control: { type: 'select' },\r\n      default: 'link',\r\n    },\r\n    deleteButtonType: {\r\n      options: ['button', 'link'],\r\n      control: { type: 'select' },\r\n      default: 'link',\r\n    },\r\n    allowSorting: {\r\n      control: { type: 'boolean' },\r\n      default: true,\r\n    },\r\n    allowSelection: {\r\n      control: { type: 'boolean' },\r\n      default: false,\r\n    },\r\n    selectionMode: {\r\n      options: ['none', 'single', 'multiple'],\r\n      control: { type: 'select' },\r\n      default: 'none',\r\n    },\r\n    pages: {\r\n      control: { type: 'number' },\r\n      default: 1,\r\n    },\r\n    currentPageSize: {\r\n      control: { type: 'number' },\r\n      default: 10,\r\n    },\r\n    paginatorStyle: {\r\n      options: ['page', 'arrow'],\r\n      control: { type: 'select' },\r\n      default: 'page',\r\n    },\r\n    theme: {\r\n      options: ['light', 'dark', 'bootstrap', 'material'],\r\n      control: { type: 'select' },\r\n      default: 'light',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HeaderComponent>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n  args: {\n    onLogin: fn(),\n    onLogout: fn(),\n    onCreateAccount: fn(),\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<InputComponent>",
                "defaultValue": "{\r\n  title: 'Components/Input',\r\n  component: InputComponent,\r\n  argTypes: {\r\n    size: {\r\n      options: ['zt-md', 'zt-sm', 'zt-lg'],\r\n      control: { type: 'select' },\r\n      default: 'zt-md',\r\n    },\r\n    theme: {\r\n      options: ['light', 'dark', 'bootstrap', 'material'],\r\n      control: { type: 'select' },\r\n      default: 'light',\r\n    },\r\n    inputStyle: {\r\n      options: ['zt', 'material', 'bs'],\r\n      control: { type: 'select' },\r\n      default: 'zt',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ZtModalComponent>",
                "defaultValue": "{\r\n  title: 'Components/Modal',\r\n  component: ZtModalComponent,\r\n  argTypes: {\r\n    size: {\r\n      options: ['sm', 'md', 'lg', 'xl', 'fullscreen'],\r\n      control: { type: 'select' },\r\n    },\r\n    theme: {\r\n      options: ['light', 'dark', 'bootstrap', 'material'],\r\n      control: { type: 'select' },\r\n      default: 'light',\r\n    },\r\n    isOpen: {\r\n      control: { type: 'boolean' },\r\n    },\r\n    closable: {\r\n      control: { type: 'boolean' },\r\n    },\r\n    backdropClosable: {\r\n      control: { type: 'boolean' },\r\n    },\r\n    title: {\r\n      control: { type: 'text' },\r\n    },\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: 'A flexible modal component with theming support, accessibility features, and customizable content areas.',\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PageComponent>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: PageComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ZtPaginatorComponent>",
                "defaultValue": "{\r\n  title: 'Components/Paginator',\r\n  component: ZtPaginatorComponent,\r\n  argTypes: {\r\n    pages: {\r\n      control: { type: 'number' },\r\n      default: 10,\r\n    },\r\n    theme: {\r\n      options: ['light', 'dark', 'bootstrap', 'material'],\r\n      control: { type: 'select' },\r\n      default: 'light',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SelectComponent>",
                "defaultValue": "{\r\n  title: 'Components/Select',\r\n  component: SelectComponent,\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: `\r\n## Select Component\r\n\r\nA versatile select dropdown component with multiple styling options.\r\n\r\n### Style-Specific Behaviors:\r\n\r\n- **ZT Style** (\\`inputStyle=\"zt\"\\`): Uses \\`value=\"\"\\` for placeholder option\r\n- **Material Style** (\\`inputStyle=\"material\"\\`): Uses \\`value=\"\"\\` for placeholder option\r\n- **Bootstrap Style** (\\`inputStyle=\"bs\"\\`): Uses \\`[ngValue]=\"null\"\\` for placeholder option (recommended)\r\n\r\n### Placeholder Handling:\r\n\r\n- ZT & Material styles: Clear to \\`-1\\`, use \\`message\\` property for placeholder text\r\n- Bootstrap style: Clears to \\`null\\`, uses \\`placeholder\\` property for placeholder text\r\n\r\n### Usage Examples:\r\n\r\n\\`\\`\\`typescript\r\n// ZT Style (default)\r\n<zt-select inputStyle=\"zt\" [dataSource]=\"options\" [key]=\"'id'\" [displayValue]=\"'name'\"></zt-select>\r\n\r\n// Material Style\r\n<zt-select inputStyle=\"material\" [dataSource]=\"options\" [key]=\"'id'\" [displayValue]=\"'name'\"></zt-select>\r\n\r\n// Bootstrap Style (with proper placeholder support)\r\n<zt-select inputStyle=\"bs\" [dataSource]=\"options\" [key]=\"'id'\" [displayValue]=\"'name'\" placeholder=\"Choose option\"></zt-select>\r\n\\`\\`\\`\r\n        `,\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    size: {\r\n      options: ['zt-md', 'zt-sm', 'zt-lg'],\r\n      control: { type: 'select' },\r\n      description: 'Size of the select component',\r\n    },\r\n    theme: {\r\n      options: ['light', 'dark', 'bootstrap', 'material'],\r\n      control: { type: 'select' },\r\n      description: 'Theme of the select component',\r\n    },\r\n    inputStyle: {\r\n      options: ['zt', 'material', 'bs'],\r\n      control: { type: 'select' },\r\n      description: 'Visual style with different placeholder behaviors',\r\n    },\r\n    placeholder: {\r\n      control: { type: 'text' },\r\n      description: 'Placeholder text (only effective with inputStyle=\"bs\")',\r\n    },\r\n  },\r\n}",
                "rawdescription": "Select component stories demonstrating different input styles and their behaviors.\r\n\r\n## Style Behaviors:\r\n- **ZT Style**: Traditional select with `value=\"\"` placeholder option\r\n- **Material Style**: Material Design styling with `value=\"\"` placeholder option\r\n- **Bootstrap Style**: Bootstrap styling with `[ngValue]=\"null\"` placeholder option (recommended for placeholder functionality)",
                "description": "<p>Select component stories demonstrating different input styles and their behaviors.</p>\n<h2>Style Behaviors:</h2>\n<ul>\n<li><strong>ZT Style</strong>: Traditional select with <code>value=&quot;&quot;</code> placeholder option</li>\n<li><strong>Material Style</strong>: Material Design styling with <code>value=&quot;&quot;</code> placeholder option</li>\n<li><strong>Bootstrap Style</strong>: Bootstrap styling with <code>[ngValue]=&quot;null&quot;</code> placeholder option (recommended for placeholder functionality)</li>\n</ul>\n"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TextareaComponent>",
                "defaultValue": "{\r\n  title: 'Components/Textarea',\r\n  component: TextareaComponent,\r\n  argTypes: {\r\n    size: {\r\n      options: ['zt-md', 'zt-sm', 'zt-lg'],\r\n      control: { type: 'select' },\r\n      default: 'zt-md',\r\n    },\r\n    theme: {\r\n      options: ['light', 'dark', 'bootstrap', 'material'],\r\n      control: { type: 'select' },\r\n      default: 'light',\r\n    },\r\n    inputStyle: {\r\n      options: ['zt', 'material', 'bs'],\r\n      control: { type: 'select' },\r\n      default: 'zt',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ZtToastComponent>",
                "defaultValue": "{\r\n  title: 'Components/Toast',\r\n  component: ZtToastComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [ZtToastModule],\r\n      providers: [ZtToastService],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: 'A custom toast notification component that provides success, error, info, and warning messages with customizable options including position, duration, dismissible behavior, and progress indicators.',\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    position: {\r\n      options: ['top-right', 'top-left', 'bottom-right', 'bottom-left', 'top-center', 'bottom-center'],\r\n      control: { type: 'select' },\r\n      description: 'Position of the toast container on the screen',\r\n    },\r\n    showDemoButtons: {\r\n      control: { type: 'boolean' },\r\n      description: 'Show demo buttons to trigger different toast types',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "MultipleToasts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates multiple toast notifications displayed simultaneously.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Multiple Toasts</h3>\r\n        <p>This story demonstrates multiple toasts. Use the Default story to see interactive examples with multiple notifications.</p>\r\n        <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "NonClosable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Non-Closable Modal',\r\n    size: 'md',\r\n    theme: 'light',\r\n    closable: false,\r\n    backdropClosable: false,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <div style=\"text-align: center; padding: 2rem;\">\r\n            <div style=\"font-size: 3rem; color: #007bff; margin-bottom: 1rem;\">⏳</div>\r\n            <h3>Processing...</h3>\r\n            <p>Please wait while we process your request. This modal cannot be closed until the operation completes.</p>\r\n            <div style=\"margin-top: 2rem;\">\r\n              <div class=\"progress\">\r\n                <div class=\"progress-bar progress-bar-striped progress-bar-animated\" style=\"width: 75%\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-primary\" (click)=\"completeModal()\" style=\"width: 100%;\">Complete Process</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      completeModal: () => {\r\n        console.log('Process completed!');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "NonDismissible",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates non-dismissible toast notifications that auto-hide after a set duration.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Non-Dismissible Toasts</h3>\r\n        <p>This story demonstrates non-dismissible toasts. Use the Default story to see interactive examples.</p>\r\n        <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Outline_Button",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    outline: true,\r\n    theme: 'light',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-button [variant]=\"'default'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">default</zt-button>\r\n    <zt-button [variant]=\"'primary'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">primary</zt-button>\r\n    <zt-button [variant]=\"'info'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">info</zt-button>\r\n    <zt-button [variant]=\"'success'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">success</zt-button>\r\n    <zt-button [variant]=\"'danger'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">danger</zt-button>\r\n    <zt-button [variant]=\"'warning'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">warning</zt-button>\r\n    <zt-button [variant]=\"'dark'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">dark</zt-button>\r\n    <zt-button [variant]=\"'link'\" [outline]=\"false\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">link</zt-button>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "OutlinedVariantsShowcase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    cardStyle: 'outlined',\r\n    theme: 'light',\r\n    size: 'md',\r\n    hoverable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 16px;\">\r\n      <zt-card cardStyle=\"outlined\" theme=\"light\" size=\"md\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Primary Outlined</div>\r\n        <div class=\"card-body\">Outlined style with primary variant features blue border and header styling.</div>\r\n        <div class=\"card-footer\"><button>Primary</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"outlined\" theme=\"light\" size=\"md\" variant=\"info\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Info Outlined</div>\r\n        <div class=\"card-body\">Outlined style with info variant uses teal border and accent colors.</div>\r\n        <div class=\"card-footer\"><button>Info</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"outlined\" theme=\"light\" size=\"md\" variant=\"danger\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Danger Outlined</div>\r\n        <div class=\"card-body\">Outlined style with danger variant features red border and styling.</div>\r\n        <div class=\"card-footer\"><button>Danger</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"outlined\" theme=\"light\" size=\"md\" variant=\"warning\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Warning Outlined</div>\r\n        <div class=\"card-body\">Outlined style with warning variant uses yellow border and accents.</div>\r\n        <div class=\"card-footer\"><button>Warning</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"outlined\" theme=\"light\" size=\"md\" variant=\"dark\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Dark Outlined</div>\r\n        <div class=\"card-body\">Outlined style with dark variant uses dark gray border and styling.</div>\r\n        <div class=\"card-footer\"><button>Dark</button></div>\r\n      </zt-card>\r\n    </div>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "Paginator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    pages: 10,\r\n    theme: 'light',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-paginator [pages]=\"pages\" [theme]=\"theme\" (onPageChange)=\"onPageChange($event)\"></zt-paginator>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "PaginatorBootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    pages: 8,\r\n    theme: 'bootstrap',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-paginator [pages]=\"pages\" [theme]=\"theme\" (onPageChange)=\"onPageChange($event)\"></zt-paginator>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "PaginatorDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    pages: 5,\r\n    theme: 'dark',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-paginator [pages]=\"pages\" [theme]=\"theme\" (onPageChange)=\"onPageChange($event)\"></zt-paginator>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "PaginatorMaterial",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    pages: 12,\r\n    theme: 'material',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-paginator [pages]=\"pages\" [theme]=\"theme\" (onPageChange)=\"onPageChange($event)\"></zt-paginator>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    controls: {\n      matchers: {\n       color: /(background|color)$/i,\n       date: /Date$/i,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Round_Button",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'light',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-button [variant]=\"'round'\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">+</zt-button>\r\n    <zt-button [variant]=\"'round'\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">✓</zt-button>\r\n    <zt-button [variant]=\"'round'\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">✕</zt-button>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "sampleColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  { field: 'id', title: 'ID', width: '80px', sortable: true },\r\n  { field: 'name', title: 'Name', sortable: true },\r\n  { field: 'age', title: 'Age', width: '100px', sortable: true },\r\n  { field: 'city', title: 'City', sortable: true },\r\n]"
            },
            {
                "name": "sampleData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  { id: 1, name: 'John Doe', age: 30, city: 'New York' },\r\n  { id: 2, name: 'Jane Smith', age: 25, city: 'Los Angeles' },\r\n  { id: 3, name: 'Bob Johnson', age: 35, city: 'Chicago' },\r\n  { id: 4, name: 'Alice Brown', age: 28, city: 'Houston' },\r\n  { id: 5, name: 'Charlie Wilson', age: 42, city: 'Phoenix' },\r\n  { id: 6, name: 'Diana Davis', age: 31, city: 'Philadelphia' },\r\n  { id: 7, name: 'Edward Miller', age: 29, city: 'San Antonio' },\r\n  { id: 8, name: 'Fiona Garcia', age: 33, city: 'San Diego' },\r\n  { id: 9, name: 'George Rodriguez', age: 27, city: 'Dallas' },\r\n  { id: 10, name: 'Helen Martinez', age: 36, city: 'San Jose' },\r\n  { id: 11, name: 'Ian Anderson', age: 24, city: 'Austin' },\r\n  { id: 12, name: 'Julia Thomas', age: 32, city: 'Jacksonville' },\r\n]"
            },
            {
                "name": "Select",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'light',\r\n    inputStyle: 'zt',\r\n    placeholder: 'Choose an option',\r\n    dataSource: [\r\n      { id: 1, firstName: 'John' },\r\n      { id: 2, firstName: 'Jane' },\r\n      { id: 3, firstName: 'Bob' },\r\n    ],\r\n    key: 'id',\r\n    displayValue: 'firstName',\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'ZT Style uses `value=\"\"` for placeholder option and displays `message` property text.',\r\n      },\r\n    },\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-select [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\" [dataSource]=\"dataSource\" [key]=\"key\" [displayValue]=\"displayValue\"></zt-select>\r\n    `,\r\n    props: args,\r\n  }),\r\n}",
                "rawdescription": "ZT Style Select - Traditional styling with `value=\"\"` placeholder option.\r\nUses the `message` property for placeholder text display.",
                "description": "<p>ZT Style Select - Traditional styling with <code>value=&quot;&quot;</code> placeholder option.\nUses the <code>message</code> property for placeholder text display.</p>\n"
            },
            {
                "name": "SizeVariations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    cardStyle: 'elevated',\r\n    theme: 'light',\r\n    variant: 'info',\r\n    hoverable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px;\">\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"sm\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Small Card</div>\r\n        <div class=\"card-body\">Small cards have reduced padding for compact layouts.</div>\r\n        <div class=\"card-footer\"><button>Small</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Medium Card</div>\r\n        <div class=\"card-body\">Medium cards are the default size with balanced padding.</div>\r\n        <div class=\"card-footer\"><button>Medium</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"lg\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Large Card</div>\r\n        <div class=\"card-body\">Large cards have increased padding for prominent content.</div>\r\n        <div class=\"card-footer\"><button>Large</button></div>\r\n      </zt-card>\r\n    </div>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Small Modal',\r\n    size: 'sm',\r\n    theme: 'light',\r\n    closable: true,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <p>This is a small modal with limited content space.</p>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-primary\" (click)=\"closeModal()\">OK</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "SuccessToast",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates a success toast notification.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Success Toast</h3>\r\n        <p>Click the button below to trigger a success toast notification.</p>\r\n        <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Textarea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'light',\r\n    inputStyle: 'zt',\r\n    placeholder: 'Enter your message',\r\n    rows: 4,\r\n    textlength: 255,\r\n    showCharCount: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-textarea [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\" [rows]=\"rows\" [textlength]=\"textlength\" [showCharCount]=\"showCharCount\"></zt-textarea>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "ThemeShowcase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    cardStyle: 'elevated',\r\n    size: 'md',\r\n    variant: 'primary',\r\n    hoverable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 16px;\">\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Light Theme</div>\r\n        <div class=\"card-body\">Light theme uses bright backgrounds and dark text for optimal readability.</div>\r\n        <div class=\"card-footer\"><button>Light</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"dark\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Dark Theme</div>\r\n        <div class=\"card-body\">Dark theme uses dark backgrounds and light text for comfortable viewing.</div>\r\n        <div class=\"card-footer\"><button>Dark</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"bootstrap\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Bootstrap Theme</div>\r\n        <div class=\"card-body\">Bootstrap theme follows Bootstrap design principles and colors.</div>\r\n        <div class=\"card-footer\"><button>Bootstrap</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"material\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Material Theme</div>\r\n        <div class=\"card-body\">Material theme follows Material Design guidelines with rounded corners.</div>\r\n        <div class=\"card-footer\"><button>Material</button></div>\r\n      </zt-card>\r\n    </div>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "UserRegistration",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    cardStyle: 'elevated',\r\n    theme: 'light',\r\n    size: 'md',\r\n    variant: 'default',\r\n    hoverable: false,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-card [cardStyle]=\"cardStyle\" [theme]=\"theme\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n      <div class=\"card-header\">\r\n        <h3>User Registration</h3>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <zt-input\r\n          placeholder=\"Enter your name\"\r\n          size=\"zt-md\"\r\n          [textlength]=\"50\">\r\n        </zt-input>\r\n        <zt-button variant=\"primary\" size=\"zt-md\">\r\n          Submit\r\n        </zt-button>\r\n      </div>\r\n    </zt-card>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "WarningToast",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates a warning toast notification.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Warning Toast</h3>\r\n        <p>This story shows the warning toast type. Use the Default story to interact with all toast types.</p>\r\n        <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithoutHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    size: 'md',\r\n    theme: 'light',\r\n    closable: false,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <div style=\"text-align: center; padding: 2rem;\">\r\n            <div style=\"font-size: 4rem; color: #28a745; margin-bottom: 1rem;\">✓</div>\r\n            <h2>Success!</h2>\r\n            <p>Your operation has been completed successfully. You can now continue with your tasks.</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-primary\" (click)=\"continueModal()\" style=\"width: 100%;\">Continue</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      continueModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "WithProgress",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates toast notifications with progress indicators.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Toasts with Progress</h3>\r\n        <p>This story demonstrates toasts with progress indicators. Use the Default story to see interactive examples.</p>\r\n        <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "projects/zt-ui-components/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CardComponent>",
                "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ZtDataGridComponent>",
                "file": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeaderComponent>",
                "file": "projects/zt-ui-components/src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InputComponent>",
                "file": "projects/zt-ui-components/src/stories/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ZtModalComponent>",
                "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PageComponent>",
                "file": "projects/zt-ui-components/src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ZtPaginatorComponent>",
                "file": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SelectComponent>",
                "file": "projects/zt-ui-components/src/stories/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TextareaComponent>",
                "file": "projects/zt-ui-components/src/stories/textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ZtToastComponent>",
                "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/zt-ui-components/src/stories/card.stories.ts": [
                {
                    "name": "AllVariantsShowcase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    cardStyle: 'elevated',\r\n    theme: 'light',\r\n    size: 'md',\r\n    hoverable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 16px;\">\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" variant=\"default\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Default Variant</div>\r\n        <div class=\"card-body\">Default variant uses standard colors and styling without accent colors.</div>\r\n        <div class=\"card-footer\"><button>Default Action</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Primary Variant</div>\r\n        <div class=\"card-body\">Primary variant uses blue colors for headers and footer borders.</div>\r\n        <div class=\"card-footer\"><button>Primary Action</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" variant=\"info\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Info Variant</div>\r\n        <div class=\"card-body\">Info variant uses teal/cyan colors for informational content.</div>\r\n        <div class=\"card-footer\"><button>Info Action</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" variant=\"danger\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Danger Variant</div>\r\n        <div class=\"card-body\">Danger variant uses red colors for warnings and errors.</div>\r\n        <div class=\"card-footer\"><button>Danger Action</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" variant=\"warning\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Warning Variant</div>\r\n        <div class=\"card-body\">Warning variant uses yellow/orange colors for cautions.</div>\r\n        <div class=\"card-footer\"><button>Warning Action</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" variant=\"dark\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Dark Variant</div>\r\n        <div class=\"card-body\">Dark variant uses dark gray colors for subtle styling.</div>\r\n        <div class=\"card-footer\"><button>Dark Action</button></div>\r\n      </zt-card>\r\n    </div>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "BasicCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    cardStyle: 'elevated',\r\n    theme: 'light',\r\n    size: 'md',\r\n    variant: 'default',\r\n    hoverable: false,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-card [cardStyle]=\"cardStyle\" [theme]=\"theme\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n      <div class=\"card-header\">Basic Card</div>\r\n      <div class=\"card-body\">This is a basic card component demonstrating the default styling with elevated style.</div>\r\n      <div class=\"card-footer\"><button>Action</button></div>\r\n    </zt-card>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "CardStylesShowcase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    theme: 'light',\r\n    size: 'md',\r\n    variant: 'default',\r\n    hoverable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;\">\r\n      <zt-card cardStyle=\"elevated\" [theme]=\"theme\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Elevated Style</div>\r\n        <div class=\"card-body\">Elevated cards have shadows and borders for a raised appearance.</div>\r\n        <div class=\"card-footer\"><button>Elevated Action</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"outlined\" [theme]=\"theme\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Outlined Style</div>\r\n        <div class=\"card-body\">Outlined cards use borders instead of shadows for definition.</div>\r\n        <div class=\"card-footer\"><button>Outlined Action</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"flat\" [theme]=\"theme\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Flat Style</div>\r\n        <div class=\"card-body\">Flat cards have no shadows or borders, perfect for subtle designs.</div>\r\n        <div class=\"card-footer\"><button>Flat Action</button></div>\r\n      </zt-card>\r\n    </div>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "CompleteShowcase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    hoverable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <div style=\"padding: 20px;\">\r\n      <h2 style=\"margin-bottom: 20px; color: #333;\">Card Component Showcase</h2>\r\n\r\n      <div style=\"margin-bottom: 40px;\">\r\n        <h3 style=\"margin-bottom: 16px; color: #666;\">Card Styles</h3>\r\n        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 16px;\">\r\n          <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Elevated Card</div>\r\n            <div class=\"card-body\">Elevated cards use shadows and borders for depth.</div>\r\n            <div class=\"card-footer\"><button>Elevated</button></div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"outlined\" theme=\"light\" size=\"md\" variant=\"info\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Outlined Card</div>\r\n            <div class=\"card-body\">Outlined cards use borders for clear definition.</div>\r\n            <div class=\"card-footer\"><button>Outlined</button></div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"flat\" theme=\"light\" size=\"md\" variant=\"warning\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Flat Card</div>\r\n            <div class=\"card-body\">Flat cards are minimal with no shadows or borders.</div>\r\n            <div class=\"card-footer\"><button>Flat</button></div>\r\n          </zt-card>\r\n        </div>\r\n      </div>\r\n\r\n      <div style=\"margin-bottom: 40px;\">\r\n        <h3 style=\"margin-bottom: 16px; color: #666;\">Color Variants</h3>\r\n        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px;\">\r\n          <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"sm\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Primary</div>\r\n            <div class=\"card-body\">Blue accent colors</div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"sm\" variant=\"info\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Info</div>\r\n            <div class=\"card-body\">Teal accent colors</div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"sm\" variant=\"danger\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Danger</div>\r\n            <div class=\"card-body\">Red accent colors</div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"sm\" variant=\"warning\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Warning</div>\r\n            <div class=\"card-body\">Yellow accent colors</div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"sm\" variant=\"dark\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Dark</div>\r\n            <div class=\"card-body\">Dark gray accents</div>\r\n          </zt-card>\r\n        </div>\r\n      </div>\r\n\r\n      <div style=\"margin-bottom: 40px;\">\r\n        <h3 style=\"margin-bottom: 16px; color: #666;\">Themes</h3>\r\n        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px;\">\r\n          <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Light Theme</div>\r\n            <div class=\"card-body\">Bright theme for light backgrounds.</div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"elevated\" theme=\"dark\" size=\"md\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Dark Theme</div>\r\n            <div class=\"card-body\">Dark theme for dark backgrounds.</div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"elevated\" theme=\"bootstrap\" size=\"md\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Bootstrap</div>\r\n            <div class=\"card-body\">Bootstrap design system colors.</div>\r\n          </zt-card>\r\n\r\n          <zt-card cardStyle=\"elevated\" theme=\"material\" size=\"md\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n            <div class=\"card-header\">Material</div>\r\n            <div class=\"card-body\">Material Design guidelines.</div>\r\n          </zt-card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "InteractiveCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    cardStyle: 'outlined',\r\n    theme: 'light',\r\n    size: 'md',\r\n    variant: 'primary',\r\n    hoverable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-card [cardStyle]=\"cardStyle\" [theme]=\"theme\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n      <div class=\"card-header\">Interactive Card</div>\r\n      <div class=\"card-body\">This card demonstrates hover effects. Try hovering over it to see the interaction.</div>\r\n      <div class=\"card-footer\"><button>Interactive Action</button></div>\r\n    </zt-card>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "MediaCards",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    cardStyle: 'elevated',\r\n    theme: 'light',\r\n    size: 'lg',\r\n    variant: 'info',\r\n    hoverable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: 20px;\">\r\n      <zt-card [cardStyle]=\"cardStyle\" [theme]=\"theme\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-media\">\r\n          <img src=\"https://picsum.photos/300/200?random=1\" alt=\"Random image\">\r\n        </div>\r\n        <div class=\"card-header\">Card with Media</div>\r\n        <div class=\"card-body\">This card demonstrates how media content is displayed above the card content.</div>\r\n        <div class=\"card-footer\"><button>View Media</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"outlined\" theme=\"material\" size=\"lg\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-media\">\r\n          <img src=\"https://picsum.photos/300/200?random=2\" alt=\"Random image\">\r\n        </div>\r\n        <div class=\"card-header\">Material Design Card</div>\r\n        <div class=\"card-body\">Material theme with rounded corners and primary variant styling.</div>\r\n        <div class=\"card-footer\"><button>Material Action</button></div>\r\n      </zt-card>\r\n    </div>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CardComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Card',\r\n  component: CardComponent,\r\n  argTypes: {\r\n    cardStyle: {\r\n      options: ['elevated', 'outlined', 'flat'],\r\n      control: { type: 'select' },\r\n      description: 'Visual style of the card',\r\n    },\r\n    theme: {\r\n      options: ['light', 'dark', 'bootstrap', 'material'],\r\n      control: { type: 'select' },\r\n      description: 'Theme variant for the card',\r\n    },\r\n    size: {\r\n      options: ['sm', 'md', 'lg'],\r\n      control: { type: 'select' },\r\n      description: 'Size of the card (affects padding)',\r\n    },\r\n    variant: {\r\n      options: ['default', 'primary', 'info', 'danger', 'warning', 'dark'],\r\n      control: { type: 'select' },\r\n      description: 'Color variant affecting header and footer styling',\r\n    },\r\n    hoverable: {\r\n      control: { type: 'boolean' },\r\n      description: 'Enable hover effects',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "OutlinedVariantsShowcase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    cardStyle: 'outlined',\r\n    theme: 'light',\r\n    size: 'md',\r\n    hoverable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 16px;\">\r\n      <zt-card cardStyle=\"outlined\" theme=\"light\" size=\"md\" variant=\"primary\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Primary Outlined</div>\r\n        <div class=\"card-body\">Outlined style with primary variant features blue border and header styling.</div>\r\n        <div class=\"card-footer\"><button>Primary</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"outlined\" theme=\"light\" size=\"md\" variant=\"info\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Info Outlined</div>\r\n        <div class=\"card-body\">Outlined style with info variant uses teal border and accent colors.</div>\r\n        <div class=\"card-footer\"><button>Info</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"outlined\" theme=\"light\" size=\"md\" variant=\"danger\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Danger Outlined</div>\r\n        <div class=\"card-body\">Outlined style with danger variant features red border and styling.</div>\r\n        <div class=\"card-footer\"><button>Danger</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"outlined\" theme=\"light\" size=\"md\" variant=\"warning\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Warning Outlined</div>\r\n        <div class=\"card-body\">Outlined style with warning variant uses yellow border and accents.</div>\r\n        <div class=\"card-footer\"><button>Warning</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"outlined\" theme=\"light\" size=\"md\" variant=\"dark\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Dark Outlined</div>\r\n        <div class=\"card-body\">Outlined style with dark variant uses dark gray border and styling.</div>\r\n        <div class=\"card-footer\"><button>Dark</button></div>\r\n      </zt-card>\r\n    </div>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "SizeVariations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    cardStyle: 'elevated',\r\n    theme: 'light',\r\n    variant: 'info',\r\n    hoverable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px;\">\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"sm\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Small Card</div>\r\n        <div class=\"card-body\">Small cards have reduced padding for compact layouts.</div>\r\n        <div class=\"card-footer\"><button>Small</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"md\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Medium Card</div>\r\n        <div class=\"card-body\">Medium cards are the default size with balanced padding.</div>\r\n        <div class=\"card-footer\"><button>Medium</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" size=\"lg\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Large Card</div>\r\n        <div class=\"card-body\">Large cards have increased padding for prominent content.</div>\r\n        <div class=\"card-footer\"><button>Large</button></div>\r\n      </zt-card>\r\n    </div>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "ThemeShowcase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    cardStyle: 'elevated',\r\n    size: 'md',\r\n    variant: 'primary',\r\n    hoverable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 16px;\">\r\n      <zt-card cardStyle=\"elevated\" theme=\"light\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Light Theme</div>\r\n        <div class=\"card-body\">Light theme uses bright backgrounds and dark text for optimal readability.</div>\r\n        <div class=\"card-footer\"><button>Light</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"dark\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Dark Theme</div>\r\n        <div class=\"card-body\">Dark theme uses dark backgrounds and light text for comfortable viewing.</div>\r\n        <div class=\"card-footer\"><button>Dark</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"bootstrap\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Bootstrap Theme</div>\r\n        <div class=\"card-body\">Bootstrap theme follows Bootstrap design principles and colors.</div>\r\n        <div class=\"card-footer\"><button>Bootstrap</button></div>\r\n      </zt-card>\r\n\r\n      <zt-card cardStyle=\"elevated\" theme=\"material\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n        <div class=\"card-header\">Material Theme</div>\r\n        <div class=\"card-body\">Material theme follows Material Design guidelines with rounded corners.</div>\r\n        <div class=\"card-footer\"><button>Material</button></div>\r\n      </zt-card>\r\n    </div>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "UserRegistration",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    cardStyle: 'elevated',\r\n    theme: 'light',\r\n    size: 'md',\r\n    variant: 'default',\r\n    hoverable: false,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-card [cardStyle]=\"cardStyle\" [theme]=\"theme\" [size]=\"size\" [variant]=\"variant\" [hoverable]=\"hoverable\">\r\n      <div class=\"card-header\">\r\n        <h3>User Registration</h3>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <zt-input\r\n          placeholder=\"Enter your name\"\r\n          size=\"zt-md\"\r\n          [textlength]=\"50\">\r\n        </zt-input>\r\n        <zt-button variant=\"primary\" size=\"zt-md\">\r\n          Submit\r\n        </zt-button>\r\n      </div>\r\n    </zt-card>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                }
            ],
            "projects/zt-ui-components/src/stories/input.stories.ts": [
                {
                    "name": "Bootstrap_Input",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'bootstrap',\r\n    inputStyle: 'bs',\r\n    placeholder: 'Bootstrap style input',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-input [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\"></zt-input>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "Input",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: \"bootstrap\",\r\n    inputStyle: 'zt',\r\n    placeholder: 'Enter text',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-input [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\"></zt-input>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "Material_Input",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'light',\r\n    inputStyle: 'material',\r\n    placeholder: 'Material style input',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-input [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\"></zt-input>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<InputComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Input',\r\n  component: InputComponent,\r\n  argTypes: {\r\n    size: {\r\n      options: ['zt-md', 'zt-sm', 'zt-lg'],\r\n      control: { type: 'select' },\r\n      default: 'zt-md',\r\n    },\r\n    theme: {\r\n      options: ['light', 'dark', 'bootstrap', 'material'],\r\n      control: { type: 'select' },\r\n      default: 'light',\r\n    },\r\n    inputStyle: {\r\n      options: ['zt', 'material', 'bs'],\r\n      control: { type: 'select' },\r\n      default: 'zt',\r\n    },\r\n  },\r\n}"
                }
            ],
            "projects/zt-ui-components/src/stories/select.stories.ts": [
                {
                    "name": "Bootstrap_Select",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'bootstrap',\r\n    inputStyle: 'bs',\r\n    placeholder: 'Choose an option',\r\n    dataSource: [\r\n      { id: 1, firstName: 'Eve' },\r\n      { id: 2, firstName: 'Frank' },\r\n      { id: 3, firstName: 'Grace' },\r\n    ],\r\n    key: 'id',\r\n    displayValue: 'firstName',\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Bootstrap Style uses `[ngValue]=\"null\"` for placeholder option and properly displays `placeholder` property text. This is the recommended style for placeholder functionality.',\r\n      },\r\n    },\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-select [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\" [dataSource]=\"dataSource\" [key]=\"key\" [displayValue]=\"displayValue\"></zt-select>\r\n    `,\r\n    props: args,\r\n  }),\r\n}",
                    "rawdescription": "Bootstrap Style Select - Bootstrap styling with `[ngValue]=\"null\"` placeholder option.\r\n**This is the only style that properly supports placeholder functionality.**\r\nUses the `placeholder` property for placeholder text display.",
                    "description": "<p>Bootstrap Style Select - Bootstrap styling with <code>[ngValue]=&quot;null&quot;</code> placeholder option.\n<strong>This is the only style that properly supports placeholder functionality.</strong>\nUses the <code>placeholder</code> property for placeholder text display.</p>\n"
                },
                {
                    "name": "Material_Select",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'light',\r\n    inputStyle: 'material',\r\n    placeholder: 'Material style select',\r\n    dataSource: [\r\n      { id: 1, firstName: 'Alice' },\r\n      { id: 2, firstName: 'Charlie' },\r\n      { id: 3, firstName: 'David' },\r\n    ],\r\n    key: 'id',\r\n    displayValue: 'firstName',\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Material Style uses `value=\"\"` for placeholder option with no display text in the option element.',\r\n      },\r\n    },\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-select [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\" [dataSource]=\"dataSource\" [key]=\"key\" [displayValue]=\"displayValue\"></zt-select>\r\n    `,\r\n    props: args,\r\n  }),\r\n}",
                    "rawdescription": "Material Style Select - Material Design styling with `value=\"\"` placeholder option.\r\nUses the `message` property for placeholder text display (empty in template).",
                    "description": "<p>Material Style Select - Material Design styling with <code>value=&quot;&quot;</code> placeholder option.\nUses the <code>message</code> property for placeholder text display (empty in template).</p>\n"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SelectComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Select',\r\n  component: SelectComponent,\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: `\r\n## Select Component\r\n\r\nA versatile select dropdown component with multiple styling options.\r\n\r\n### Style-Specific Behaviors:\r\n\r\n- **ZT Style** (\\`inputStyle=\"zt\"\\`): Uses \\`value=\"\"\\` for placeholder option\r\n- **Material Style** (\\`inputStyle=\"material\"\\`): Uses \\`value=\"\"\\` for placeholder option\r\n- **Bootstrap Style** (\\`inputStyle=\"bs\"\\`): Uses \\`[ngValue]=\"null\"\\` for placeholder option (recommended)\r\n\r\n### Placeholder Handling:\r\n\r\n- ZT & Material styles: Clear to \\`-1\\`, use \\`message\\` property for placeholder text\r\n- Bootstrap style: Clears to \\`null\\`, uses \\`placeholder\\` property for placeholder text\r\n\r\n### Usage Examples:\r\n\r\n\\`\\`\\`typescript\r\n// ZT Style (default)\r\n<zt-select inputStyle=\"zt\" [dataSource]=\"options\" [key]=\"'id'\" [displayValue]=\"'name'\"></zt-select>\r\n\r\n// Material Style\r\n<zt-select inputStyle=\"material\" [dataSource]=\"options\" [key]=\"'id'\" [displayValue]=\"'name'\"></zt-select>\r\n\r\n// Bootstrap Style (with proper placeholder support)\r\n<zt-select inputStyle=\"bs\" [dataSource]=\"options\" [key]=\"'id'\" [displayValue]=\"'name'\" placeholder=\"Choose option\"></zt-select>\r\n\\`\\`\\`\r\n        `,\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    size: {\r\n      options: ['zt-md', 'zt-sm', 'zt-lg'],\r\n      control: { type: 'select' },\r\n      description: 'Size of the select component',\r\n    },\r\n    theme: {\r\n      options: ['light', 'dark', 'bootstrap', 'material'],\r\n      control: { type: 'select' },\r\n      description: 'Theme of the select component',\r\n    },\r\n    inputStyle: {\r\n      options: ['zt', 'material', 'bs'],\r\n      control: { type: 'select' },\r\n      description: 'Visual style with different placeholder behaviors',\r\n    },\r\n    placeholder: {\r\n      control: { type: 'text' },\r\n      description: 'Placeholder text (only effective with inputStyle=\"bs\")',\r\n    },\r\n  },\r\n}",
                    "rawdescription": "Select component stories demonstrating different input styles and their behaviors.\r\n\r\n## Style Behaviors:\r\n- **ZT Style**: Traditional select with `value=\"\"` placeholder option\r\n- **Material Style**: Material Design styling with `value=\"\"` placeholder option\r\n- **Bootstrap Style**: Bootstrap styling with `[ngValue]=\"null\"` placeholder option (recommended for placeholder functionality)",
                    "description": "<p>Select component stories demonstrating different input styles and their behaviors.</p>\n<h2>Style Behaviors:</h2>\n<ul>\n<li><strong>ZT Style</strong>: Traditional select with <code>value=&quot;&quot;</code> placeholder option</li>\n<li><strong>Material Style</strong>: Material Design styling with <code>value=&quot;&quot;</code> placeholder option</li>\n<li><strong>Bootstrap Style</strong>: Bootstrap styling with <code>[ngValue]=&quot;null&quot;</code> placeholder option (recommended for placeholder functionality)</li>\n</ul>\n"
                },
                {
                    "name": "Select",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'light',\r\n    inputStyle: 'zt',\r\n    placeholder: 'Choose an option',\r\n    dataSource: [\r\n      { id: 1, firstName: 'John' },\r\n      { id: 2, firstName: 'Jane' },\r\n      { id: 3, firstName: 'Bob' },\r\n    ],\r\n    key: 'id',\r\n    displayValue: 'firstName',\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'ZT Style uses `value=\"\"` for placeholder option and displays `message` property text.',\r\n      },\r\n    },\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-select [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\" [dataSource]=\"dataSource\" [key]=\"key\" [displayValue]=\"displayValue\"></zt-select>\r\n    `,\r\n    props: args,\r\n  }),\r\n}",
                    "rawdescription": "ZT Style Select - Traditional styling with `value=\"\"` placeholder option.\r\nUses the `message` property for placeholder text display.",
                    "description": "<p>ZT Style Select - Traditional styling with <code>value=&quot;&quot;</code> placeholder option.\nUses the <code>message</code> property for placeholder text display.</p>\n"
                }
            ],
            "projects/zt-ui-components/src/stories/textarea.stories.ts": [
                {
                    "name": "Bootstrap_Textarea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'bootstrap',\r\n    inputStyle: 'bs',\r\n    placeholder: 'Bootstrap style textarea',\r\n    rows: 4,\r\n    textlength: 255,\r\n    showCharCount: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-textarea [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\" [rows]=\"rows\" [textlength]=\"textlength\" [showCharCount]=\"showCharCount\"></zt-textarea>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "Material_Textarea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'light',\r\n    inputStyle: 'material',\r\n    placeholder: 'Material style textarea',\r\n    rows: 4,\r\n    textlength: 255,\r\n    showCharCount: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-textarea [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\" [rows]=\"rows\" [textlength]=\"textlength\" [showCharCount]=\"showCharCount\"></zt-textarea>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TextareaComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Textarea',\r\n  component: TextareaComponent,\r\n  argTypes: {\r\n    size: {\r\n      options: ['zt-md', 'zt-sm', 'zt-lg'],\r\n      control: { type: 'select' },\r\n      default: 'zt-md',\r\n    },\r\n    theme: {\r\n      options: ['light', 'dark', 'bootstrap', 'material'],\r\n      control: { type: 'select' },\r\n      default: 'light',\r\n    },\r\n    inputStyle: {\r\n      options: ['zt', 'material', 'bs'],\r\n      control: { type: 'select' },\r\n      default: 'zt',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Textarea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'light',\r\n    inputStyle: 'zt',\r\n    placeholder: 'Enter your message',\r\n    rows: 4,\r\n    textlength: 255,\r\n    showCharCount: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-textarea [size]=\"size\" [theme]=\"theme\" [inputStyle]=\"inputStyle\" [placeholder]=\"placeholder\" [rows]=\"rows\" [textlength]=\"textlength\" [showCharCount]=\"showCharCount\"></zt-textarea>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                }
            ],
            "projects/zt-ui-components/src/stories/modal.stories.ts": [
                {
                    "name": "BootstrapTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Bootstrap Theme Modal',\r\n    size: 'md',\r\n    theme: 'bootstrap',\r\n    closable: true,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <p>This modal uses the Bootstrap theme with classic styling and subtle background colors.</p>\r\n          <div class=\"alert alert-info\" role=\"alert\">\r\n            <strong>Bootstrap Theme:</strong> Familiar Bootstrap modal appearance with enhanced accessibility.\r\n          </div>\r\n          <p>The Bootstrap theme maintains consistency with Bootstrap-based applications.</p>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-secondary\" (click)=\"closeModal()\">Close</button>\r\n          <button class=\"btn btn-primary\" (click)=\"saveModal()\">Save Changes</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      saveModal: () => {\r\n        console.log('Saved with Bootstrap theme!');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "ConfirmationDialog",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Confirm Action',\r\n    size: 'sm',\r\n    theme: 'light',\r\n    closable: true,\r\n    backdropClosable: false,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <div style=\"text-align: center; padding: 1rem;\">\r\n            <div style=\"font-size: 3rem; color: #ffc107; margin-bottom: 1rem;\">⚠️</div>\r\n            <p>Are you sure you want to delete this item? This action cannot be undone.</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-secondary\" (click)=\"cancelModal()\">Cancel</button>\r\n          <button class=\"btn btn-danger\" (click)=\"deleteModal()\">Delete</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      cancelModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      deleteModal: () => {\r\n        console.log('Item deleted!');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "CustomContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Custom Content Modal',\r\n    size: 'lg',\r\n    theme: 'light',\r\n    closable: true,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <div style=\"display: flex; gap: 1rem; margin-bottom: 1rem;\">\r\n            <div style=\"flex: 1;\">\r\n              <h5>Form Section</h5>\r\n              <div style=\"margin-bottom: 1rem;\">\r\n                <label style=\"display: block; margin-bottom: 0.5rem;\">Name:</label>\r\n                <input type=\"text\" class=\"form-control\" placeholder=\"Enter your name\">\r\n              </div>\r\n              <div style=\"margin-bottom: 1rem;\">\r\n                <label style=\"display: block; margin-bottom: 0.5rem;\">Email:</label>\r\n                <input type=\"email\" class=\"form-control\" placeholder=\"Enter your email\">\r\n              </div>\r\n            </div>\r\n            <div style=\"flex: 1;\">\r\n              <h5>Preview</h5>\r\n              <div style=\"background: #f8f9fa; padding: 1rem; border-radius: 0.25rem; height: 120px;\">\r\n                <p style=\"margin: 0;\">Form preview will appear here...</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div style=\"background: #e9ecef; padding: 1rem; border-radius: 0.25rem;\">\r\n            <strong>Custom Content:</strong> This modal demonstrates how to include forms, images, and complex layouts within the modal body.\r\n          </div>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <div style=\"display: flex; justify-content: space-between; width: 100%;\">\r\n            <button class=\"btn btn-outline-secondary\" (click)=\"resetModal()\">Reset</button>\r\n            <div>\r\n              <button class=\"btn btn-secondary\" (click)=\"closeModal()\" style=\"margin-right: 0.5rem;\">Cancel</button>\r\n              <button class=\"btn btn-primary\" (click)=\"submitModal()\">Submit</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      resetModal: () => {\r\n        console.log('Form reset!');\r\n      },\r\n      submitModal: () => {\r\n        console.log('Form submitted!');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "DarkTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Dark Theme Modal',\r\n    size: 'md',\r\n    theme: 'dark',\r\n    closable: true,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <div style=\"background: #1a1a1a; padding: 20px; min-height: 100vh;\">\r\n        <zt-modal\r\n          [isOpen]=\"isOpen\"\r\n          [title]=\"title\"\r\n          [size]=\"size\"\r\n          [theme]=\"theme\"\r\n          [closable]=\"closable\"\r\n          [backdropClosable]=\"backdropClosable\">\r\n\r\n          <div modal-body>\r\n            <p>This modal uses the dark theme, perfect for dark mode applications or nighttime usage.</p>\r\n            <div style=\"background: #2d2d2d; padding: 1rem; border-radius: 0.25rem; margin: 1rem 0;\">\r\n              <code style=\"color: #61dafb;\">const theme = 'dark';</code>\r\n            </div>\r\n            <p>The dark theme provides better contrast in low-light environments and reduces eye strain.</p>\r\n          </div>\r\n\r\n          <div modal-footer>\r\n            <button class=\"btn btn-secondary\" (click)=\"closeModal()\">Close</button>\r\n            <button class=\"btn btn-primary\" (click)=\"applyModal()\">Apply Theme</button>\r\n          </div>\r\n        </zt-modal>\r\n      </div>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      applyModal: () => {\r\n        console.log('Dark theme applied!');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Default Modal',\r\n    size: 'md',\r\n    theme: 'light',\r\n    closable: true,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\"\r\n        (onClose)=\"onClose()\"\r\n        (onOpen)=\"onOpen()\">\r\n\r\n        <div modal-body>\r\n          <p>This is the default modal with standard content. You can customize the body and footer as needed.</p>\r\n          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-secondary\" (click)=\"closeModal()\">Close</button>\r\n          <button class=\"btn btn-primary\" (click)=\"saveModal()\">Save Changes</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      onClose: () => console.log('Modal closed'),\r\n      onOpen: () => console.log('Modal opened'),\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      saveModal: () => {\r\n        console.log('Saving...');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "ExtraLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Extra Large Modal',\r\n    size: 'xl',\r\n    theme: 'light',\r\n    closable: true,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <h3>Extra Large Modal</h3>\r\n          <p>This extra large modal provides maximum space for content, ideal for data tables, detailed forms, or multi-step wizards.</p>\r\n\r\n          <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin: 1rem 0;\">\r\n            <div style=\"background: #e9ecef; padding: 1rem; border-radius: 0.25rem;\">\r\n              <h5>Column 1</h5>\r\n              <p>Content for the first column.</p>\r\n            </div>\r\n            <div style=\"background: #e9ecef; padding: 1rem; border-radius: 0.25rem;\">\r\n              <h5>Column 2</h5>\r\n              <p>Content for the second column.</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div style=\"background: #d1ecf1; padding: 1rem; border-radius: 0.25rem; margin: 1rem 0;\">\r\n            <strong>Note:</strong> This modal size is perfect for complex layouts and extensive information display.\r\n          </div>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-secondary\" (click)=\"closeModal()\">Close</button>\r\n          <button class=\"btn btn-primary\" (click)=\"proceedModal()\">Proceed</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      proceedModal: () => {\r\n        console.log('Proceeding...');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "Fullscreen",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Fullscreen Modal',\r\n    size: 'fullscreen',\r\n    theme: 'light',\r\n    closable: true,\r\n    backdropClosable: false,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body style=\"height: calc(100vh - 200px); overflow-y: auto;\">\r\n          <h2>Fullscreen Modal</h2>\r\n          <p>This fullscreen modal utilizes the entire viewport for maximum content space.</p>\r\n\r\n          <div style=\"margin: 2rem 0;\">\r\n            <h4>Perfect for:</h4>\r\n            <ul>\r\n              <li>Image galleries and media viewers</li>\r\n              <li>Complex data visualization</li>\r\n              <li>Multi-step forms or wizards</li>\r\n              <li>Full-screen editing interfaces</li>\r\n              <li>Document viewers</li>\r\n            </ul>\r\n          </div>\r\n\r\n          <div style=\"background: linear-gradient(45deg, #f8f9fa, #e9ecef); padding: 2rem; border-radius: 0.5rem; margin: 2rem 0;\">\r\n            <h5>Content Area</h5>\r\n            <p>This area can contain any type of content, including scrollable sections, interactive elements, and rich media.</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-secondary\" (click)=\"closeModal()\">Exit Fullscreen</button>\r\n          <button class=\"btn btn-primary\" (click)=\"finishModal()\">Finish</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      finishModal: () => {\r\n        console.log('Finished!');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Large Modal',\r\n    size: 'lg',\r\n    theme: 'light',\r\n    closable: true,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <h4>Large Modal Content</h4>\r\n          <p>This large modal can accommodate extensive content, including lists, forms, and multimedia elements.</p>\r\n\r\n          <div style=\"margin: 1rem 0;\">\r\n            <h5>Features:</h5>\r\n            <ul>\r\n              <li>Responsive design that adapts to screen sizes</li>\r\n              <li>Keyboard navigation and focus management</li>\r\n              <li>Multiple theme support</li>\r\n              <li>Accessibility compliant with ARIA attributes</li>\r\n              <li>Customizable header, body, and footer sections</li>\r\n            </ul>\r\n          </div>\r\n\r\n          <div style=\"background: #f8f9fa; padding: 1rem; border-radius: 0.25rem; margin: 1rem 0;\">\r\n            <strong>Tip:</strong> Use this modal for detailed forms, image galleries, or complex user interactions.\r\n          </div>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-secondary\" (click)=\"closeModal()\">Cancel</button>\r\n          <button class=\"btn btn-success\" (click)=\"confirmModal()\">Confirm</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      confirmModal: () => {\r\n        console.log('Confirmed!');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "MaterialTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Material Theme Modal',\r\n    size: 'md',\r\n    theme: 'material',\r\n    closable: true,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <p>This modal uses the Material Design theme with modern styling and subtle shadows.</p>\r\n          <div style=\"background: #e3f2fd; padding: 1rem; border-radius: 4px; margin: 1rem 0;\">\r\n            <strong>Material Theme:</strong> Clean, modern design inspired by Material Design principles.\r\n          </div>\r\n          <p>The Material theme provides a contemporary look with enhanced depth and visual hierarchy.</p>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-secondary\" (click)=\"closeModal()\">Cancel</button>\r\n          <button class=\"btn btn-primary\" (click)=\"confirmModal()\">Confirm</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n      confirmModal: () => {\r\n        console.log('Confirmed with Material theme!');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ZtModalComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Modal',\r\n  component: ZtModalComponent,\r\n  argTypes: {\r\n    size: {\r\n      options: ['sm', 'md', 'lg', 'xl', 'fullscreen'],\r\n      control: { type: 'select' },\r\n    },\r\n    theme: {\r\n      options: ['light', 'dark', 'bootstrap', 'material'],\r\n      control: { type: 'select' },\r\n      default: 'light',\r\n    },\r\n    isOpen: {\r\n      control: { type: 'boolean' },\r\n    },\r\n    closable: {\r\n      control: { type: 'boolean' },\r\n    },\r\n    backdropClosable: {\r\n      control: { type: 'boolean' },\r\n    },\r\n    title: {\r\n      control: { type: 'text' },\r\n    },\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: 'A flexible modal component with theming support, accessibility features, and customizable content areas.',\r\n      },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "NonClosable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Non-Closable Modal',\r\n    size: 'md',\r\n    theme: 'light',\r\n    closable: false,\r\n    backdropClosable: false,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <div style=\"text-align: center; padding: 2rem;\">\r\n            <div style=\"font-size: 3rem; color: #007bff; margin-bottom: 1rem;\">⏳</div>\r\n            <h3>Processing...</h3>\r\n            <p>Please wait while we process your request. This modal cannot be closed until the operation completes.</p>\r\n            <div style=\"margin-top: 2rem;\">\r\n              <div class=\"progress\">\r\n                <div class=\"progress-bar progress-bar-striped progress-bar-animated\" style=\"width: 75%\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-primary\" (click)=\"completeModal()\" style=\"width: 100%;\">Complete Process</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      completeModal: () => {\r\n        console.log('Process completed!');\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    title: 'Small Modal',\r\n    size: 'sm',\r\n    theme: 'light',\r\n    closable: true,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [title]=\"title\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <p>This is a small modal with limited content space.</p>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-primary\" (click)=\"closeModal()\">OK</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      closeModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "WithoutHeader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    isOpen: true,\r\n    size: 'md',\r\n    theme: 'light',\r\n    closable: false,\r\n    backdropClosable: true,\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <zt-modal\r\n        [isOpen]=\"isOpen\"\r\n        [size]=\"size\"\r\n        [theme]=\"theme\"\r\n        [closable]=\"closable\"\r\n        [backdropClosable]=\"backdropClosable\">\r\n\r\n        <div modal-body>\r\n          <div style=\"text-align: center; padding: 2rem;\">\r\n            <div style=\"font-size: 4rem; color: #28a745; margin-bottom: 1rem;\">✓</div>\r\n            <h2>Success!</h2>\r\n            <p>Your operation has been completed successfully. You can now continue with your tasks.</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div modal-footer>\r\n          <button class=\"btn btn-primary\" (click)=\"continueModal()\" style=\"width: 100%;\">Continue</button>\r\n        </div>\r\n      </zt-modal>\r\n    `,\r\n    props: {\r\n      ...args,\r\n      continueModal: () => {\r\n        args.isOpen = false;\r\n      },\r\n    },\r\n  }),\r\n}"
                }
            ],
            "projects/zt-ui-components/src/stories/button.stories.ts": [
                {
                    "name": "Button",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: \"zt-sm\",\r\n    outline: false,\r\n    theme: \"light\",\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-button [variant]=\"'default'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">default</zt-button>\r\n    <zt-button [variant]=\"'primary'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">primary</zt-button>\r\n    <zt-button [variant]=\"'info'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">info</zt-button>\r\n    <zt-button [variant]=\"'success'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">success</zt-button>\r\n    <zt-button [variant]=\"'danger'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">danger</zt-button>\r\n    <zt-button [variant]=\"'warning'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">warning</zt-button>\r\n    <zt-button [variant]=\"'dark'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">dark</zt-button>\r\n    <zt-button [variant]=\"'link'\" [outline]=\"false\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">link</zt-button>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "Floating_Button",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    theme: 'light',\r\n    size: \"zt-sm\"\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-button [variant]=\"'floating'\" [theme]=\"theme\">+</zt-button>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Button',\r\n  component: ButtonComponent,\r\n  argTypes: {\r\n    size: {\r\n      options: ['zt-md', 'zt-sm', 'zt-lg'],\r\n      control: { type: 'select' },\r\n      default: 'zt-md',\r\n    },\r\n    theme: {\r\n      options: ['light', 'dark', 'bootstrap', 'material'],\r\n      control: { type: 'select' },\r\n      default: 'light',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Outline_Button",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    outline: true,\r\n    theme: 'light',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-button [variant]=\"'default'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">default</zt-button>\r\n    <zt-button [variant]=\"'primary'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">primary</zt-button>\r\n    <zt-button [variant]=\"'info'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">info</zt-button>\r\n    <zt-button [variant]=\"'success'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">success</zt-button>\r\n    <zt-button [variant]=\"'danger'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">danger</zt-button>\r\n    <zt-button [variant]=\"'warning'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">warning</zt-button>\r\n    <zt-button [variant]=\"'dark'\" [outline]=\"outline\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">dark</zt-button>\r\n    <zt-button [variant]=\"'link'\" [outline]=\"false\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">link</zt-button>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "Round_Button",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'zt-md',\r\n    theme: 'light',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-button [variant]=\"'round'\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">+</zt-button>\r\n    <zt-button [variant]=\"'round'\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">✓</zt-button>\r\n    <zt-button [variant]=\"'round'\" [size]=\"size\" [theme]=\"theme\" style=\"margin-right: 1em; margin-bottom:1em;\">✕</zt-button>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                }
            ],
            "projects/zt-ui-components/src/stories/data-grid.stories.ts": [
                {
                    "name": "DataGrid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    dataSource: sampleData,\r\n    columns: sampleColumns,\r\n    striped: true,\r\n    showBorders: true,\r\n    showEdit: true,\r\n    showDelete: true,\r\n    editButtonType: 'link',\r\n    deleteButtonType: 'link',\r\n    allowSorting: true,\r\n    allowSelection: true,\r\n    selectionMode: 'none',\r\n    pages: 4,\r\n    currentPageSize: 5,\r\n    paginatorStyle: 'page',\r\n    theme: \"material\",\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-data-grid\r\n      [dataSource]=\"dataSource\"\r\n      [columns]=\"columns\"\r\n      [striped]=\"striped\"\r\n      [showBorders]=\"showBorders\"\r\n      [showEdit]=\"showEdit\"\r\n      [showDelete]=\"showDelete\"\r\n      [editButtonType]=\"editButtonType\"\r\n      [deleteButtonType]=\"deleteButtonType\"\r\n      [allowSorting]=\"allowSorting\"\r\n      [allowSelection]=\"allowSelection\"\r\n      [selectionMode]=\"selectionMode\"\r\n      [pages]=\"pages\"\r\n      [currentPageSize]=\"currentPageSize\"\r\n      [paginatorStyle]=\"paginatorStyle\"\r\n      [theme]=\"theme\"\r\n      (onPageChange)=\"onPageChange($event)\"\r\n      (onDataGridEvent)=\"onDataGridEvent($event)\"\r\n    ></zt-data-grid>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "DataGridArrowPaginator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    dataSource: sampleData,\r\n    columns: sampleColumns,\r\n    striped: false,\r\n    showBorders: true,\r\n    showEdit: true,\r\n    showDelete: true,\r\n    editButtonType: 'button',\r\n    deleteButtonType: 'button',\r\n    allowSorting: true,\r\n    allowSelection: false,\r\n    selectionMode: 'none',\r\n    pages: 3,\r\n    currentPageSize: 4,\r\n    paginatorStyle: 'arrow',\r\n    theme: 'dark',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-data-grid\r\n      [dataSource]=\"dataSource\"\r\n      [columns]=\"columns\"\r\n      [striped]=\"striped\"\r\n      [showBorders]=\"showBorders\"\r\n      [showEdit]=\"showEdit\"\r\n      [showDelete]=\"showDelete\"\r\n      [allowSorting]=\"allowSorting\"\r\n      [allowSelection]=\"allowSelection\"\r\n      [selectionMode]=\"selectionMode\"\r\n      [pages]=\"pages\"\r\n      [pagesLimit]=\"pagesLimit\"\r\n      [currentPageSize]=\"currentPageSize\"\r\n      [paginatorStyle]=\"paginatorStyle\"\r\n      [theme]=\"theme\"\r\n      (onPageChange)=\"onPageChange($event)\"\r\n      (onDataGridEvent)=\"onDataGridEvent($event)\"\r\n    ></zt-data-grid>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "DataGridStriped",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    dataSource: sampleData,\r\n    columns: sampleColumns,\r\n    striped: true,\r\n    showBorders: true,\r\n    showEdit: false,\r\n    showDelete: false,\r\n    editButtonType: 'link',\r\n    deleteButtonType: 'link',\r\n    allowSorting: true,\r\n    allowSelection: false,\r\n    selectionMode: 'none',\r\n    pages: 3,\r\n    currentPageSize: 4,\r\n    paginatorStyle: 'page',\r\n    theme: 'light',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-data-grid\r\n      [dataSource]=\"dataSource\"\r\n      [columns]=\"columns\"\r\n      [striped]=\"striped\"\r\n      [showBorders]=\"showBorders\"\r\n      [showEdit]=\"showEdit\"\r\n      [showDelete]=\"showDelete\"\r\n      [allowSorting]=\"allowSorting\"\r\n      [allowSelection]=\"allowSelection\"\r\n      [selectionMode]=\"selectionMode\"\r\n      [pages]=\"pages\"\r\n      [currentPageSize]=\"currentPageSize\"\r\n      [paginatorStyle]=\"paginatorStyle\"\r\n      [theme]=\"theme\"\r\n      (onPageChange)=\"onPageChange($event)\"\r\n      (onDataGridEvent)=\"onDataGridEvent($event)\"\r\n    ></zt-data-grid>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ZtDataGridComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Data Grid',\r\n  component: ZtDataGridComponent,\r\n  argTypes: {\r\n    dataSource: {\r\n      control: { type: 'object' },\r\n    },\r\n    columns: {\r\n      control: { type: 'object' },\r\n    },\r\n    striped: {\r\n      control: { type: 'boolean' },\r\n      default: false,\r\n    },\r\n    showBorders: {\r\n      control: { type: 'boolean' },\r\n      default: true,\r\n    },\r\n    showEdit: {\r\n      control: { type: 'boolean' },\r\n      default: false,\r\n    },\r\n    showDelete: {\r\n      control: { type: 'boolean' },\r\n      default: false,\r\n    },\r\n    editButtonType: {\r\n      options: ['button', 'link'],\r\n      control: { type: 'select' },\r\n      default: 'link',\r\n    },\r\n    deleteButtonType: {\r\n      options: ['button', 'link'],\r\n      control: { type: 'select' },\r\n      default: 'link',\r\n    },\r\n    allowSorting: {\r\n      control: { type: 'boolean' },\r\n      default: true,\r\n    },\r\n    allowSelection: {\r\n      control: { type: 'boolean' },\r\n      default: false,\r\n    },\r\n    selectionMode: {\r\n      options: ['none', 'single', 'multiple'],\r\n      control: { type: 'select' },\r\n      default: 'none',\r\n    },\r\n    pages: {\r\n      control: { type: 'number' },\r\n      default: 1,\r\n    },\r\n    currentPageSize: {\r\n      control: { type: 'number' },\r\n      default: 10,\r\n    },\r\n    paginatorStyle: {\r\n      options: ['page', 'arrow'],\r\n      control: { type: 'select' },\r\n      default: 'page',\r\n    },\r\n    theme: {\r\n      options: ['light', 'dark', 'bootstrap', 'material'],\r\n      control: { type: 'select' },\r\n      default: 'light',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "sampleColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  { field: 'id', title: 'ID', width: '80px', sortable: true },\r\n  { field: 'name', title: 'Name', sortable: true },\r\n  { field: 'age', title: 'Age', width: '100px', sortable: true },\r\n  { field: 'city', title: 'City', sortable: true },\r\n]"
                },
                {
                    "name": "sampleData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  { id: 1, name: 'John Doe', age: 30, city: 'New York' },\r\n  { id: 2, name: 'Jane Smith', age: 25, city: 'Los Angeles' },\r\n  { id: 3, name: 'Bob Johnson', age: 35, city: 'Chicago' },\r\n  { id: 4, name: 'Alice Brown', age: 28, city: 'Houston' },\r\n  { id: 5, name: 'Charlie Wilson', age: 42, city: 'Phoenix' },\r\n  { id: 6, name: 'Diana Davis', age: 31, city: 'Philadelphia' },\r\n  { id: 7, name: 'Edward Miller', age: 29, city: 'San Antonio' },\r\n  { id: 8, name: 'Fiona Garcia', age: 33, city: 'San Diego' },\r\n  { id: 9, name: 'George Rodriguez', age: 27, city: 'Dallas' },\r\n  { id: 10, name: 'Helen Martinez', age: 36, city: 'San Jose' },\r\n  { id: 11, name: 'Ian Anderson', age: 24, city: 'Austin' },\r\n  { id: 12, name: 'Julia Thomas', age: 32, city: 'Jacksonville' },\r\n]"
                }
            ],
            "projects/zt-ui-components/src/stories/toast.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    position: 'top-right',\r\n    showDemoButtons: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: 'Default toast component with demo buttons to test all toast types.',\r\n    },\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Toast Notifications Demo</h3>\r\n        <p>Use the buttons below to trigger different types of toast notifications.</p>\r\n        <zt-toast [position]=\"position\" [showDemoButtons]=\"showDemoButtons\"></zt-toast>\r\n      </div>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "DifferentPositions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates toast notifications in different positions.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Different Positions</h3>\r\n        <p>This story shows multiple toast containers in different positions. Use the Default story to interact with the toasts.</p>\r\n        <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;\">\r\n          <div>\r\n            <h4>Top Positions</h4>\r\n            <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n            <zt-toast position=\"top-left\" showDemoButtons=\"false\"></zt-toast>\r\n            <zt-toast position=\"top-center\" showDemoButtons=\"false\"></zt-toast>\r\n          </div>\r\n          <div>\r\n            <h4>Bottom Positions</h4>\r\n            <zt-toast position=\"bottom-right\" showDemoButtons=\"false\"></zt-toast>\r\n            <zt-toast position=\"bottom-left\" showDemoButtons=\"false\"></zt-toast>\r\n            <zt-toast position=\"bottom-center\" showDemoButtons=\"false\"></zt-toast>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "ErrorToast",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates an error toast notification.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Error Toast</h3>\r\n        <p>This story shows the error toast type. Use the Default story to interact with all toast types.</p>\r\n        <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "InfoToast",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates an info toast notification.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Info Toast</h3>\r\n        <p>This story shows the info toast type. Use the Default story to interact with all toast types.</p>\r\n        <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "LongDuration",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates toast notifications with longer duration.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Long Duration Toasts</h3>\r\n        <p>This story demonstrates toasts with longer duration. Use the Default story to see interactive examples.</p>\r\n        <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ZtToastComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Toast',\r\n  component: ZtToastComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [ZtToastModule],\r\n      providers: [ZtToastService],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: 'A custom toast notification component that provides success, error, info, and warning messages with customizable options including position, duration, dismissible behavior, and progress indicators.',\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    position: {\r\n      options: ['top-right', 'top-left', 'bottom-right', 'bottom-left', 'top-center', 'bottom-center'],\r\n      control: { type: 'select' },\r\n      description: 'Position of the toast container on the screen',\r\n    },\r\n    showDemoButtons: {\r\n      control: { type: 'boolean' },\r\n      description: 'Show demo buttons to trigger different toast types',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "MultipleToasts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates multiple toast notifications displayed simultaneously.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Multiple Toasts</h3>\r\n        <p>This story demonstrates multiple toasts. Use the Default story to see interactive examples with multiple notifications.</p>\r\n        <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "NonDismissible",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates non-dismissible toast notifications that auto-hide after a set duration.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Non-Dismissible Toasts</h3>\r\n        <p>This story demonstrates non-dismissible toasts. Use the Default story to see interactive examples.</p>\r\n        <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "SuccessToast",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates a success toast notification.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Success Toast</h3>\r\n        <p>Click the button below to trigger a success toast notification.</p>\r\n        <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WarningToast",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates a warning toast notification.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Warning Toast</h3>\r\n        <p>This story shows the warning toast type. Use the Default story to interact with all toast types.</p>\r\n        <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithProgress",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: 'Demonstrates toast notifications with progress indicators.',\r\n    },\r\n  },\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"padding: 20px; height: 100vh; background: #f5f5f5;\">\r\n        <h3>Toasts with Progress</h3>\r\n        <p>This story demonstrates toasts with progress indicators. Use the Default story to see interactive examples.</p>\r\n        <zt-toast position=\"top-right\" showDemoButtons=\"false\"></zt-toast>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                }
            ],
            "projects/zt-ui-components/src/stories/header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HeaderComponent>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n  args: {\n    onLogin: fn(),\n    onLogout: fn(),\n    onCreateAccount: fn(),\n  },\n}"
                }
            ],
            "projects/zt-ui-components/src/stories/page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PageComponent>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: PageComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "projects/zt-ui-components/src/stories/paginator.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ZtPaginatorComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Paginator',\r\n  component: ZtPaginatorComponent,\r\n  argTypes: {\r\n    pages: {\r\n      control: { type: 'number' },\r\n      default: 10,\r\n    },\r\n    theme: {\r\n      options: ['light', 'dark', 'bootstrap', 'material'],\r\n      control: { type: 'select' },\r\n      default: 'light',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Paginator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    pages: 10,\r\n    theme: 'light',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-paginator [pages]=\"pages\" [theme]=\"theme\" (onPageChange)=\"onPageChange($event)\"></zt-paginator>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "PaginatorBootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    pages: 8,\r\n    theme: 'bootstrap',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-paginator [pages]=\"pages\" [theme]=\"theme\" (onPageChange)=\"onPageChange($event)\"></zt-paginator>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "PaginatorDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    pages: 5,\r\n    theme: 'dark',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-paginator [pages]=\"pages\" [theme]=\"theme\" (onPageChange)=\"onPageChange($event)\"></zt-paginator>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "PaginatorMaterial",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    pages: 12,\r\n    theme: 'material',\r\n  },\r\n  render: (args) => ({\r\n    template: `\r\n    <zt-paginator [pages]=\"pages\" [theme]=\"theme\" (onPageChange)=\"onPageChange($event)\"></zt-paginator>\r\n    `,\r\n    props: args,\r\n  }),\r\n}"
                }
            ],
            "projects/zt-ui-components/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zt-ui-components/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    controls: {\n      matchers: {\n       color: /(background|color)$/i,\n       date: /Date$/i,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/zt-ui-components/src/stories/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "projects/zt-ui-components/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/zt-ui-components/src/stories/card.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CardComponent>",
                    "file": "projects/zt-ui-components/src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/zt-ui-components/src/stories/data-grid.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ZtDataGridComponent>",
                    "file": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/zt-ui-components/src/stories/header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeaderComponent>",
                    "file": "projects/zt-ui-components/src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/zt-ui-components/src/stories/input.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InputComponent>",
                    "file": "projects/zt-ui-components/src/stories/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/zt-ui-components/src/stories/modal.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ZtModalComponent>",
                    "file": "projects/zt-ui-components/src/stories/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/zt-ui-components/src/stories/page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PageComponent>",
                    "file": "projects/zt-ui-components/src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/zt-ui-components/src/stories/paginator.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ZtPaginatorComponent>",
                    "file": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/zt-ui-components/src/stories/select.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SelectComponent>",
                    "file": "projects/zt-ui-components/src/stories/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/zt-ui-components/src/stories/textarea.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TextareaComponent>",
                    "file": "projects/zt-ui-components/src/stories/textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/zt-ui-components/src/stories/toast.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ZtToastComponent>",
                    "file": "projects/zt-ui-components/src/stories/toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "children": []
    },
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "projects/zt-ui-components/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Button",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Floating_Button",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Outline_Button",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Round_Button",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/button.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllVariantsShowcase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CardStylesShowcase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CompleteShowcase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InteractiveCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MediaCards",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlinedVariantsShowcase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SizeVariations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ThemeShowcase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UserRegistration",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/card.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DataGrid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DataGridArrowPaginator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DataGridStriped",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/data-grid.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/header.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Bootstrap_Input",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Input",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Material_Input",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/input.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BootstrapTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ConfirmationDialog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DarkTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ExtraLarge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Fullscreen",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MaterialTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NonClosable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/modal.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/page.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Paginator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PaginatorBootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PaginatorDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PaginatorMaterial",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/paginator.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Bootstrap_Select",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Material_Select",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Select",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/select.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Bootstrap_Textarea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Material_Textarea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Textarea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/textarea.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DifferentPositions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ErrorToast",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InfoToast",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LongDuration",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleToasts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NonDismissible",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SuccessToast",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WarningToast",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithProgress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zt-ui-components/src/stories/toast.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}